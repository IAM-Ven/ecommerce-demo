package com.diffblue.demo.ecommerce.controllers;

import static org.mockito.AdditionalMatchers.or;
import static org.mockito.Matchers.anyInt;
import static org.mockito.Matchers.isA;
import static org.mockito.Matchers.isNull;

import com.diffblue.deeptestutils.Reflector;
import com.diffblue.deeptestutils.mock.DTUMemberMatcher;
import com.diffblue.demo.ecommerce.EmptyCartException;
import com.diffblue.demo.ecommerce.InvalidCartItemException;
import com.diffblue.demo.ecommerce.controllers.CheckoutController;
import com.diffblue.demo.ecommerce.forms.AddressForm;
import com.diffblue.demo.ecommerce.forms.CustomerForm;
import com.diffblue.demo.ecommerce.forms.PaymentForm;
import com.diffblue.demo.ecommerce.models.Address;
import com.diffblue.demo.ecommerce.models.Cart;
import com.diffblue.demo.ecommerce.models.Category;
import com.diffblue.demo.ecommerce.models.Collection;
import com.diffblue.demo.ecommerce.models.Order;
import com.diffblue.demo.ecommerce.models.OrderItem;
import com.diffblue.demo.ecommerce.models.Product;
import com.diffblue.demo.ecommerce.repositories.AddressRepository;
import com.diffblue.demo.ecommerce.repositories.OrderItemRepository;
import com.diffblue.demo.ecommerce.repositories.OrderRepository;
import org.junit.Assert;
import org.junit.Rule;
import org.junit.Test;
import org.junit.rules.ExpectedException;
import org.junit.rules.Timeout;
import org.junit.runner.RunWith;
import org.powermock.api.mockito.PowerMockito;
import org.powermock.api.mockito.expectation.PowerMockitoStubber;
import org.powermock.core.classloader.annotations.PowerMockIgnore;
import org.powermock.core.classloader.annotations.PrepareForTest;
import org.powermock.modules.junit4.PowerMockRunner;
import org.springframework.validation.BindingResult;

import java.lang.reflect.Array;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;
import javax.servlet.http.HttpSession;

@org.junit.runner
    .RunWith(org.powermock.modules.junit4.PowerMockRunner.class)
    @org.powermock.core.classloader.annotations.PowerMockIgnore({"javax.management.*"})
    public class CheckoutControllerTest {

  @Rule public ExpectedException thrown = ExpectedException.none();
  @Rule public Timeout globalTimeout = new Timeout(10000);

  /* testedClasses: CheckoutController */
  /*
   * Test generated by Diffblue Cover.
   * This test case covers the entire method.
   */

  @Test
  public void constructorInputNotNullNotNullNotNullOutputVoid() throws InvocationTargetException {

    // Arrange
    final OrderRepository orderRepo = (OrderRepository)Reflector.getInstance(
        "com.diffblue.demo.ecommerce.repositories.OrderRepository");
    final AddressRepository addressRepo = (AddressRepository)Reflector.getInstance(
        "com.diffblue.demo.ecommerce.repositories.AddressRepository");
    final OrderItemRepository orderItemRepo = (OrderItemRepository)Reflector.getInstance(
        "com.diffblue.demo.ecommerce.repositories.OrderItemRepository");

    // Act, creating object to test constructor
    final CheckoutController objectUnderTest =
        new CheckoutController(orderRepo, addressRepo, orderItemRepo);

    // Method returns void, testing that no exception is thrown
  }

  /*
   * Test generated by Diffblue Cover.
   * This test case covers the entire method.
   */
  @PrepareForTest({OrderItemRepository.class})
  @Test
  public void lambda$makePayment$0InputNotNullNotNullZeroOutputVoid()
      throws Exception, InvocationTargetException, IllegalAccessException, NoSuchMethodException {

    // Arrange
    final CheckoutController objectUnderTest = (CheckoutController)Reflector.getInstance(
        "com.diffblue.demo.ecommerce.controllers.CheckoutController");
    final OrderItemRepository orderItemRepository = PowerMockito.mock(OrderItemRepository.class);
    final OrderItem orderItem =
        (OrderItem)Reflector.getInstance("com.diffblue.demo.ecommerce.models.OrderItem");
    Reflector.setField(orderItem, "order", null);
    Reflector.setField(orderItem, "product", null);
    Reflector.setField(orderItem, "quantity", 0);
    Reflector.setField(orderItem, "id", 0);
    PowerMockito.when(orderItemRepository.save(or(isA(OrderItem.class), isNull(OrderItem.class))))
        .thenReturn(orderItem);
    Reflector.setField(objectUnderTest, "orderItemRepo", orderItemRepository);
    Reflector.setField(objectUnderTest, "orderRepo", null);
    Reflector.setField(objectUnderTest, "addressRepo", null);
    final Order savedOrder =
        (Order)Reflector.getInstance("com.diffblue.demo.ecommerce.models.Order");
    savedOrder.setLastName(null);
    savedOrder.setPhoneNumber(null);
    savedOrder.setOrderRef(null);
    savedOrder.setShippingAddress(null);
    savedOrder.setFirstName(null);
    savedOrder.setEmail(null);
    savedOrder.setId(0);
    final Product product = new Product();
    final Integer quantity = 0;

    // Act
    final Class<?> classUnderTest =
        Reflector.forName("com.diffblue.demo.ecommerce.controllers.CheckoutController");
    final Method methodUnderTest = classUnderTest.getDeclaredMethod(
        "lambda$makePayment$0", Reflector.forName("com.diffblue.demo.ecommerce.models.Order"),
        Reflector.forName("com.diffblue.demo.ecommerce.models.Product"),
        Reflector.forName("java.lang.Integer"));
    methodUnderTest.setAccessible(true);
    methodUnderTest.invoke(objectUnderTest, savedOrder, product, quantity);

    // Method returns void, testing that no exception is thrown
  }

  /*
   * Test generated by Diffblue Cover.
   * This test case covers:
   *  - conditional line 139 branch to line 139
   *  - conditional line 140 branch to line 140
   *  - conditional line 142 branch to line 142
   *  - conditional line 142 branch to line 144
   *  - conditional line 144 branch to line 144
   *  - conditional line 145 branch to line 145
   */
  @PrepareForTest({BindingResult.class, CheckoutController.class, HttpSession.class})
  @Test
  public void makePaymentInputNullNotNull0NotNullOutputNotNull()
      throws Exception, InvocationTargetException {

    // Arrange
    final CheckoutController objectUnderTest = (CheckoutController)Reflector.getInstance(
        "com.diffblue.demo.ecommerce.controllers.CheckoutController");
    final OrderItemRepository orderItemRepository = (OrderItemRepository)Reflector.getInstance(
        "com.diffblue.demo.ecommerce.repositories.OrderItemRepository");
    Reflector.setField(objectUnderTest, "orderItemRepo", orderItemRepository);
    final OrderRepository orderRepository = (OrderRepository)Reflector.getInstance(
        "com.diffblue.demo.ecommerce.repositories.OrderRepository");
    Reflector.setField(objectUnderTest, "orderRepo", orderRepository);
    final AddressRepository addressRepository = (AddressRepository)Reflector.getInstance(
        "com.diffblue.demo.ecommerce.repositories.AddressRepository");
    Reflector.setField(objectUnderTest, "addressRepo", addressRepository);
    final PaymentForm paymentForm = null;
    final BindingResult bindingResult = PowerMockito.mock(BindingResult.class);
    final Method hasErrorsMethod = DTUMemberMatcher.method(BindingResult.class, "hasErrors");
    PowerMockito.doReturn(true).when(bindingResult, hasErrorsMethod).withNoArguments();
    final HashMap<String, Object> model = new HashMap<String, Object>();
    final HttpSession session = PowerMockito.mock(HttpSession.class);
    final CustomerForm customerForm =
        (CustomerForm)Reflector.getInstance("com.diffblue.demo.ecommerce.forms.CustomerForm");
    Reflector.setField(customerForm, "email", null);
    Reflector.setField(customerForm, "phoneNumber", "");
    Reflector.setField(customerForm, "shippingAddressForm", null);
    Reflector.setField(customerForm, "firstName", "");
    Reflector.setField(customerForm, "lastName", null);
    final Method getAttributeMethod =
        DTUMemberMatcher.method(HttpSession.class, "getAttribute", String.class);
    ((PowerMockitoStubber)PowerMockito.doReturn(null).doReturn(customerForm))
        .when(session, getAttributeMethod)
        .withArguments(or(isA(String.class), isNull(String.class)));

    // Act
    final String retval = objectUnderTest.makePayment(paymentForm, bindingResult, model, session);

    // Assert result
    Assert.assertEquals("Payment", retval);
  }

  /*
   * Test generated by Diffblue Cover.
   * This test case covers:
   *  - conditional line 139 branch to line 139
   *  - conditional line 140 branch to line 140
   *  - conditional line 142 branch to line 142
   *  - conditional line 142 branch to line 150
   *  - conditional line 150 branch to line 150
   */
  @PrepareForTest({BindingResult.class, CheckoutController.class, HttpSession.class})
  @Test
  public void makePaymentInputNullNotNull1NotNullOutputNullPointerException()
      throws Exception, InvocationTargetException {

    // Arrange
    final CheckoutController objectUnderTest = (CheckoutController)Reflector.getInstance(
        "com.diffblue.demo.ecommerce.controllers.CheckoutController");
    final OrderItemRepository orderItemRepository = (OrderItemRepository)Reflector.getInstance(
        "com.diffblue.demo.ecommerce.repositories.OrderItemRepository");
    Reflector.setField(objectUnderTest, "orderItemRepo", orderItemRepository);
    Reflector.setField(objectUnderTest, "orderRepo", null);
    final AddressRepository addressRepository = (AddressRepository)Reflector.getInstance(
        "com.diffblue.demo.ecommerce.repositories.AddressRepository");
    Reflector.setField(objectUnderTest, "addressRepo", addressRepository);
    final PaymentForm paymentForm = null;
    final BindingResult bindingResult = PowerMockito.mock(BindingResult.class);
    final Method hasErrorsMethod = DTUMemberMatcher.method(BindingResult.class, "hasErrors");
    PowerMockito.doReturn(false).when(bindingResult, hasErrorsMethod).withNoArguments();
    final HashMap<String, Object> model = new HashMap<String, Object>();
    model.put("cart", null);
    final HttpSession session = PowerMockito.mock(HttpSession.class);
    final Cart cart = (Cart)Reflector.getInstance("com.diffblue.demo.ecommerce.models.Cart");
    Reflector.setField(cart, "shipping", 0.0);
    final HashMap<Product, Integer> hashMap = new HashMap<Product, Integer>();
    final Product product =
        (Product)Reflector.getInstance("com.diffblue.demo.ecommerce.models.Product");
    Reflector.setField(product, "description", "");
    Reflector.setField(product, "size", "");
    final Category category =
        (Category)Reflector.getInstance("com.diffblue.demo.ecommerce.models.Category");
    Reflector.setField(category, "products", null);
    Reflector.setField(category, "id", 0);
    Reflector.setField(category, "name", "");
    Reflector.setField(product, "category", category);
    Reflector.setField(product, "photo", "");
    Reflector.setField(product, "name", "");
    final Collection collection =
        (Collection)Reflector.getInstance("com.diffblue.demo.ecommerce.models.Collection");
    Reflector.setField(collection, "products", null);
    Reflector.setField(collection, "id", 0);
    Reflector.setField(collection, "name", "");
    Reflector.setField(product, "collection", collection);
    Reflector.setField(product, "id", 0);
    Reflector.setField(product, "sku", "");
    Reflector.setField(product, "price", 0.0);
    hashMap.put(product, 0);
    Reflector.setField(cart, "cartItems", hashMap);
    Reflector.setField(cart, "taxRate", -0.0);
    Reflector.setField(cart, "total", 0.0);
    Reflector.setField(cart, "subtotal", 0.0);
    Reflector.setField(cart, "tax", 0.0);
    final Method getAttributeMethod =
        DTUMemberMatcher.method(HttpSession.class, "getAttribute", String.class);
    ((PowerMockitoStubber)PowerMockito.doReturn(cart).doReturn(null))
        .when(session, getAttributeMethod)
        .withArguments(or(isA(String.class), isNull(String.class)));

    // Act
    thrown.expect(NullPointerException.class);
    objectUnderTest.makePayment(paymentForm, bindingResult, model, session);

    // Method is not expected to return due to exception thrown
  }

  /*
   * Test generated by Diffblue Cover.
   * This test case covers:
   *  - conditional line 139 branch to line 139
   *  - conditional line 140 branch to line 140
   *  - conditional line 142 branch to line 142
   *  - conditional line 142 branch to line 150
   *  - conditional line 150 branch to line 150
   *  - conditional line 152 branch to line 152
   */
  @PrepareForTest({BindingResult.class, CheckoutController.class, HttpSession.class})
  @Test
  public void makePaymentInputNullNotNull1NotNullOutputNullPointerException2()
      throws Exception, InvocationTargetException {

    // Arrange
    final CheckoutController objectUnderTest = (CheckoutController)Reflector.getInstance(
        "com.diffblue.demo.ecommerce.controllers.CheckoutController");
    final OrderItemRepository orderItemRepository = (OrderItemRepository)Reflector.getInstance(
        "com.diffblue.demo.ecommerce.repositories.OrderItemRepository");
    Reflector.setField(objectUnderTest, "orderItemRepo", orderItemRepository);
    final OrderRepository orderRepository = (OrderRepository)Reflector.getInstance(
        "com.diffblue.demo.ecommerce.repositories.OrderRepository");
    Reflector.setField(objectUnderTest, "orderRepo", orderRepository);
    final AddressRepository addressRepository = (AddressRepository)Reflector.getInstance(
        "com.diffblue.demo.ecommerce.repositories.AddressRepository");
    Reflector.setField(objectUnderTest, "addressRepo", addressRepository);
    final PaymentForm paymentForm = null;
    final BindingResult bindingResult = PowerMockito.mock(BindingResult.class);
    final Method hasErrorsMethod = DTUMemberMatcher.method(BindingResult.class, "hasErrors");
    PowerMockito.doReturn(false).when(bindingResult, hasErrorsMethod).withNoArguments();
    final HashMap<String, Object> model = new HashMap<String, Object>();
    model.put("cart", null);
    final HttpSession session = PowerMockito.mock(HttpSession.class);
    final CustomerForm customerForm =
        (CustomerForm)Reflector.getInstance("com.diffblue.demo.ecommerce.forms.CustomerForm");
    Reflector.setField(customerForm, "email", "");
    Reflector.setField(customerForm, "phoneNumber", "");
    Reflector.setField(customerForm, "shippingAddressForm", null);
    Reflector.setField(customerForm, "firstName", "");
    Reflector.setField(customerForm, "lastName", "");
    final Cart cart = (Cart)Reflector.getInstance("com.diffblue.demo.ecommerce.models.Cart");
    Reflector.setField(cart, "shipping", 0.0);
    final HashMap<Product, Integer> hashMap = new HashMap<Product, Integer>();
    final Product product =
        (Product)Reflector.getInstance("com.diffblue.demo.ecommerce.models.Product");
    Reflector.setField(product, "description", "");
    Reflector.setField(product, "size", "");
    final Category category =
        (Category)Reflector.getInstance("com.diffblue.demo.ecommerce.models.Category");
    Reflector.setField(category, "products", null);
    Reflector.setField(category, "id", 0);
    Reflector.setField(category, "name", "");
    Reflector.setField(product, "category", category);
    Reflector.setField(product, "photo", "");
    Reflector.setField(product, "name", "");
    final Collection collection =
        (Collection)Reflector.getInstance("com.diffblue.demo.ecommerce.models.Collection");
    Reflector.setField(collection, "products", null);
    Reflector.setField(collection, "id", 0);
    Reflector.setField(collection, "name", "");
    Reflector.setField(product, "collection", collection);
    Reflector.setField(product, "id", 0);
    Reflector.setField(product, "sku", "");
    Reflector.setField(product, "price", 0.0);
    hashMap.put(product, 0);
    Reflector.setField(cart, "cartItems", hashMap);
    Reflector.setField(cart, "taxRate", -0.0);
    Reflector.setField(cart, "total", 0.0);
    Reflector.setField(cart, "subtotal", 0.0);
    Reflector.setField(cart, "tax", 0.0);
    final Method getAttributeMethod =
        DTUMemberMatcher.method(HttpSession.class, "getAttribute", String.class);
    ((PowerMockitoStubber)PowerMockito.doReturn(cart).doReturn(customerForm))
        .when(session, getAttributeMethod)
        .withArguments(or(isA(String.class), isNull(String.class)));

    // Act
    thrown.expect(NullPointerException.class);
    objectUnderTest.makePayment(paymentForm, bindingResult, model, session);

    // Method is not expected to return due to exception thrown
  }

  /*
   * Test generated by Diffblue Cover.
   * This test case covers:
   *  - conditional line 139 branch to line 139
   *  - conditional line 140 branch to line 140
   *  - conditional line 142 branch to line 142
   *  - conditional line 142 branch to line 150
   *  - conditional line 150 branch to line 150
   *  - conditional line 152 branch to line 152
   *  - conditional line 152 branch to line 153
   *  - conditional line 153 branch to line 153
   *  - conditional line 154 branch to line 154
   *  - conditional line 155 branch to line 155
   *  - conditional line 161 branch to line 161
   */
  @PrepareForTest({BindingResult.class, CheckoutController.class, HttpSession.class})
  @Test
  public void makePaymentInputNullNotNull1NotNullOutputNullPointerException3()
      throws Exception, InvocationTargetException {

    // Arrange
    final CheckoutController objectUnderTest = (CheckoutController)Reflector.getInstance(
        "com.diffblue.demo.ecommerce.controllers.CheckoutController");
    final OrderItemRepository orderItemRepository = (OrderItemRepository)Reflector.getInstance(
        "com.diffblue.demo.ecommerce.repositories.OrderItemRepository");
    Reflector.setField(objectUnderTest, "orderItemRepo", orderItemRepository);
    final OrderRepository orderRepository = (OrderRepository)Reflector.getInstance(
        "com.diffblue.demo.ecommerce.repositories.OrderRepository");
    Reflector.setField(objectUnderTest, "orderRepo", orderRepository);
    Reflector.setField(objectUnderTest, "addressRepo", null);
    final PaymentForm paymentForm = null;
    final BindingResult bindingResult = PowerMockito.mock(BindingResult.class);
    final Method hasErrorsMethod = DTUMemberMatcher.method(BindingResult.class, "hasErrors");
    PowerMockito.doReturn(false).when(bindingResult, hasErrorsMethod).withNoArguments();
    final HashMap<String, Object> model = new HashMap<String, Object>();
    model.put("cart", null);
    final HttpSession session = PowerMockito.mock(HttpSession.class);
    final CustomerForm customerForm =
        (CustomerForm)Reflector.getInstance("com.diffblue.demo.ecommerce.forms.CustomerForm");
    Reflector.setField(customerForm, "email", null);
    Reflector.setField(customerForm, "phoneNumber", null);
    final AddressForm addressForm =
        (AddressForm)Reflector.getInstance("com.diffblue.demo.ecommerce.forms.AddressForm");
    Reflector.setField(addressForm, "postcode", "");
    Reflector.setField(addressForm, "city", "");
    Reflector.setField(addressForm, "country", "");
    Reflector.setField(addressForm, "company", "");
    Reflector.setField(addressForm, "addressLine", "");
    Reflector.setField(customerForm, "shippingAddressForm", addressForm);
    Reflector.setField(customerForm, "firstName", null);
    Reflector.setField(customerForm, "lastName", null);
    final Cart cart = (Cart)Reflector.getInstance("com.diffblue.demo.ecommerce.models.Cart");
    Reflector.setField(cart, "shipping", 0.0);
    final HashMap<Product, Integer> hashMap = new HashMap<Product, Integer>();
    final Product product =
        (Product)Reflector.getInstance("com.diffblue.demo.ecommerce.models.Product");
    Reflector.setField(product, "description", "");
    Reflector.setField(product, "size", "");
    final Category category =
        (Category)Reflector.getInstance("com.diffblue.demo.ecommerce.models.Category");
    Reflector.setField(category, "products", null);
    Reflector.setField(category, "id", 0);
    Reflector.setField(category, "name", "");
    Reflector.setField(product, "category", category);
    Reflector.setField(product, "photo", "");
    Reflector.setField(product, "name", "");
    final Collection collection =
        (Collection)Reflector.getInstance("com.diffblue.demo.ecommerce.models.Collection");
    Reflector.setField(collection, "products", null);
    Reflector.setField(collection, "id", 0);
    Reflector.setField(collection, "name", "");
    Reflector.setField(product, "collection", collection);
    Reflector.setField(product, "id", 0);
    Reflector.setField(product, "sku", "");
    Reflector.setField(product, "price", 0.0);
    hashMap.put(product, 0);
    Reflector.setField(cart, "cartItems", hashMap);
    Reflector.setField(cart, "taxRate", -0.0);
    Reflector.setField(cart, "total", 0.0);
    Reflector.setField(cart, "subtotal", 0.0);
    Reflector.setField(cart, "tax", 0.0);
    final Method getAttributeMethod =
        DTUMemberMatcher.method(HttpSession.class, "getAttribute", String.class);
    ((PowerMockitoStubber)PowerMockito.doReturn(cart).doReturn(customerForm))
        .when(session, getAttributeMethod)
        .withArguments(or(isA(String.class), isNull(String.class)));

    // Act
    thrown.expect(NullPointerException.class);
    objectUnderTest.makePayment(paymentForm, bindingResult, model, session);

    // Method is not expected to return due to exception thrown
  }

  /*
   * Test generated by Diffblue Cover.
   * This test case covers:
   *  - conditional line 139 branch to line 139
   *  - conditional line 140 branch to line 140
   *  - conditional line 142 branch to line 142
   *  - conditional line 142 branch to line 150
   *  - conditional line 150 branch to line 150
   *  - conditional line 152 branch to line 152
   *  - conditional line 152 branch to line 153
   *  - conditional line 153 branch to line 153
   *  - conditional line 154 branch to line 154
   *  - conditional line 155 branch to line 155
   *  - conditional line 161 branch to line 161
   *  - conditional line 163 branch to line 163
   */
  @PrepareForTest({BindingResult.class, AddressRepository.class, CheckoutController.class,
                   HttpSession.class})
  @Test
  public void
  makePaymentInputNullNotNull1NotNullOutputNullPointerException4()
      throws Exception, InvocationTargetException {

    // Arrange
    final CheckoutController objectUnderTest = (CheckoutController)Reflector.getInstance(
        "com.diffblue.demo.ecommerce.controllers.CheckoutController");
    final OrderItemRepository orderItemRepository = (OrderItemRepository)Reflector.getInstance(
        "com.diffblue.demo.ecommerce.repositories.OrderItemRepository");
    Reflector.setField(objectUnderTest, "orderItemRepo", orderItemRepository);
    final OrderRepository orderRepository = (OrderRepository)Reflector.getInstance(
        "com.diffblue.demo.ecommerce.repositories.OrderRepository");
    Reflector.setField(objectUnderTest, "orderRepo", orderRepository);
    final AddressRepository addressRepository = PowerMockito.mock(AddressRepository.class);
    PowerMockito.when(addressRepository.save(or(isA(Address.class), isNull(Address.class))))
        .thenReturn(null);
    Reflector.setField(objectUnderTest, "addressRepo", addressRepository);
    final PaymentForm paymentForm = null;
    final BindingResult bindingResult = PowerMockito.mock(BindingResult.class);
    final Method hasErrorsMethod = DTUMemberMatcher.method(BindingResult.class, "hasErrors");
    PowerMockito.doReturn(false).when(bindingResult, hasErrorsMethod).withNoArguments();
    final HashMap<String, Object> model = new HashMap<String, Object>();
    model.put("cart", null);
    final HttpSession session = PowerMockito.mock(HttpSession.class);
    final CustomerForm customerForm =
        (CustomerForm)Reflector.getInstance("com.diffblue.demo.ecommerce.forms.CustomerForm");
    Reflector.setField(customerForm, "email", null);
    Reflector.setField(customerForm, "phoneNumber", null);
    final AddressForm addressForm =
        (AddressForm)Reflector.getInstance("com.diffblue.demo.ecommerce.forms.AddressForm");
    Reflector.setField(addressForm, "postcode", "");
    Reflector.setField(addressForm, "city", "");
    Reflector.setField(addressForm, "country", "");
    Reflector.setField(addressForm, "company", "");
    Reflector.setField(addressForm, "addressLine", "");
    Reflector.setField(customerForm, "shippingAddressForm", addressForm);
    Reflector.setField(customerForm, "firstName", null);
    Reflector.setField(customerForm, "lastName", null);
    final Cart cart = (Cart)Reflector.getInstance("com.diffblue.demo.ecommerce.models.Cart");
    Reflector.setField(cart, "shipping", 0.0);
    final HashMap<Product, Integer> hashMap = new HashMap<Product, Integer>();
    final Product product =
        (Product)Reflector.getInstance("com.diffblue.demo.ecommerce.models.Product");
    Reflector.setField(product, "description", "");
    Reflector.setField(product, "size", "");
    final Category category =
        (Category)Reflector.getInstance("com.diffblue.demo.ecommerce.models.Category");
    Reflector.setField(category, "products", null);
    Reflector.setField(category, "id", 0);
    Reflector.setField(category, "name", "");
    Reflector.setField(product, "category", category);
    Reflector.setField(product, "photo", "");
    Reflector.setField(product, "name", "");
    final Collection collection =
        (Collection)Reflector.getInstance("com.diffblue.demo.ecommerce.models.Collection");
    Reflector.setField(collection, "products", null);
    Reflector.setField(collection, "id", 0);
    Reflector.setField(collection, "name", "");
    Reflector.setField(product, "collection", collection);
    Reflector.setField(product, "id", 0);
    Reflector.setField(product, "sku", "");
    Reflector.setField(product, "price", 0.0);
    hashMap.put(product, 0);
    Reflector.setField(cart, "cartItems", hashMap);
    Reflector.setField(cart, "taxRate", -0.0);
    Reflector.setField(cart, "total", 0.0);
    Reflector.setField(cart, "subtotal", 0.0);
    Reflector.setField(cart, "tax", 0.0);
    final Method getAttributeMethod =
        DTUMemberMatcher.method(HttpSession.class, "getAttribute", String.class);
    ((PowerMockitoStubber)PowerMockito.doReturn(cart).doReturn(customerForm))
        .when(session, getAttributeMethod)
        .withArguments(or(isA(String.class), isNull(String.class)));

    // Act
    thrown.expect(NullPointerException.class);
    objectUnderTest.makePayment(paymentForm, bindingResult, model, session);

    // Method is not expected to return due to exception thrown
  }

  /*
   * Test generated by Diffblue Cover.
   * This test case covers:
   *  - conditional line 139 branch to line 139
   *  - conditional line 140 branch to line 140
   *  - conditional line 142 branch to line 142
   *  - conditional line 142 branch to line 150
   *  - conditional line 150 branch to line 150
   *  - conditional line 152 branch to line 152
   *  - conditional line 152 branch to line 153
   *  - conditional line 153 branch to line 153
   *  - conditional line 154 branch to line 154
   *  - conditional line 155 branch to line 155
   *  - conditional line 161 branch to line 161
   *  - conditional line 163 branch to line 163
   *  - conditional line 164 branch to line 164
   *  - conditional line 165 branch to line 165
   *  - conditional line 165 branch to line 163
   *  - conditional line 163 branch to line 163
   */
  @PrepareForTest({BindingResult.class, AddressRepository.class, CheckoutController.class,
                   HttpSession.class})
  @Test
  public void
  makePaymentInputNullNotNull1NotNullOutputNullPointerException5()
      throws Exception, InvocationTargetException {

    // Arrange
    final CheckoutController objectUnderTest = (CheckoutController)Reflector.getInstance(
        "com.diffblue.demo.ecommerce.controllers.CheckoutController");
    final OrderItemRepository orderItemRepository = (OrderItemRepository)Reflector.getInstance(
        "com.diffblue.demo.ecommerce.repositories.OrderItemRepository");
    Reflector.setField(objectUnderTest, "orderItemRepo", orderItemRepository);
    Reflector.setField(objectUnderTest, "orderRepo", null);
    final AddressRepository addressRepository = PowerMockito.mock(AddressRepository.class);
    PowerMockito.when(addressRepository.save(or(isA(Address.class), isNull(Address.class))))
        .thenReturn(null);
    Reflector.setField(objectUnderTest, "addressRepo", addressRepository);
    final PaymentForm paymentForm = null;
    final BindingResult bindingResult = PowerMockito.mock(BindingResult.class);
    final Method hasErrorsMethod = DTUMemberMatcher.method(BindingResult.class, "hasErrors");
    PowerMockito.doReturn(false).when(bindingResult, hasErrorsMethod).withNoArguments();
    final HashMap<String, Object> model = new HashMap<String, Object>();
    model.put("cart", null);
    final HttpSession session = PowerMockito.mock(HttpSession.class);
    final CustomerForm customerForm =
        (CustomerForm)Reflector.getInstance("com.diffblue.demo.ecommerce.forms.CustomerForm");
    Reflector.setField(customerForm, "email", null);
    Reflector.setField(customerForm, "phoneNumber", null);
    final AddressForm addressForm =
        (AddressForm)Reflector.getInstance("com.diffblue.demo.ecommerce.forms.AddressForm");
    Reflector.setField(addressForm, "postcode", "");
    Reflector.setField(addressForm, "city", "");
    Reflector.setField(addressForm, "country", "");
    Reflector.setField(addressForm, "company", "");
    Reflector.setField(addressForm, "addressLine", "");
    Reflector.setField(customerForm, "shippingAddressForm", addressForm);
    Reflector.setField(customerForm, "firstName", null);
    Reflector.setField(customerForm, "lastName", null);
    final Cart cart = (Cart)Reflector.getInstance("com.diffblue.demo.ecommerce.models.Cart");
    Reflector.setField(cart, "shipping", 0.0);
    final HashMap<Product, Integer> hashMap = new HashMap<Product, Integer>();
    final Product product =
        (Product)Reflector.getInstance("com.diffblue.demo.ecommerce.models.Product");
    Reflector.setField(product, "description", "");
    Reflector.setField(product, "size", "");
    final Category category =
        (Category)Reflector.getInstance("com.diffblue.demo.ecommerce.models.Category");
    Reflector.setField(category, "products", null);
    Reflector.setField(category, "id", 0);
    Reflector.setField(category, "name", "");
    Reflector.setField(product, "category", category);
    Reflector.setField(product, "photo", "");
    Reflector.setField(product, "name", "");
    final Collection collection =
        (Collection)Reflector.getInstance("com.diffblue.demo.ecommerce.models.Collection");
    Reflector.setField(collection, "products", null);
    Reflector.setField(collection, "id", 0);
    Reflector.setField(collection, "name", "");
    Reflector.setField(product, "collection", collection);
    Reflector.setField(product, "id", 0);
    Reflector.setField(product, "sku", "");
    Reflector.setField(product, "price", 0.0);
    hashMap.put(product, 0);
    Reflector.setField(cart, "cartItems", hashMap);
    Reflector.setField(cart, "taxRate", -0.0);
    Reflector.setField(cart, "total", 0.0);
    Reflector.setField(cart, "subtotal", 0.0);
    Reflector.setField(cart, "tax", 0.0);
    final Method getAttributeMethod =
        DTUMemberMatcher.method(HttpSession.class, "getAttribute", String.class);
    ((PowerMockitoStubber)PowerMockito.doReturn(cart).doReturn(customerForm))
        .when(session, getAttributeMethod)
        .withArguments(or(isA(String.class), isNull(String.class)));

    // Act
    thrown.expect(NullPointerException.class);
    objectUnderTest.makePayment(paymentForm, bindingResult, model, session);

    // Method is not expected to return due to exception thrown
  }

  /*
   * Test generated by Diffblue Cover.
   * This test case covers:
   *  - conditional line 139 branch to line 139
   *  - conditional line 140 branch to line 140
   *  - conditional line 142 branch to line 142
   *  - conditional line 142 branch to line 150
   *  - conditional line 150 branch to line 150
   *  - conditional line 152 branch to line 152
   *  - conditional line 152 branch to line 153
   *  - conditional line 153 branch to line 153
   *  - conditional line 154 branch to line 154
   *  - conditional line 155 branch to line 155
   *  - conditional line 161 branch to line 161
   *  - conditional line 163 branch to line 163
   *  - conditional line 164 branch to line 164
   *  - conditional line 165 branch to line 165
   *  - conditional line 165 branch to line 163
   *  - conditional line 163 branch to line 163
   *  - conditional line 168 branch to line 168
   */
  @PrepareForTest({CheckoutController.class, HttpSession.class, AddressRepository.class,
                   OrderRepository.class, BindingResult.class})
  @Test
  public void
  makePaymentInputNullNotNull1NotNullOutputNullPointerException6()
      throws Exception, InvocationTargetException {

    // Arrange
    final CheckoutController objectUnderTest = (CheckoutController)Reflector.getInstance(
        "com.diffblue.demo.ecommerce.controllers.CheckoutController");
    final OrderItemRepository orderItemRepository = (OrderItemRepository)Reflector.getInstance(
        "com.diffblue.demo.ecommerce.repositories.OrderItemRepository");
    Reflector.setField(objectUnderTest, "orderItemRepo", orderItemRepository);
    final OrderRepository orderRepository = PowerMockito.mock(OrderRepository.class);
    final Order order = (Order)Reflector.getInstance("com.diffblue.demo.ecommerce.models.Order");
    Reflector.setField(order, "lastName", "");
    Reflector.setField(order, "phoneNumber", "");
    Reflector.setField(order, "orderRef", "");
    final Address address =
        (Address)Reflector.getInstance("com.diffblue.demo.ecommerce.models.Address");
    Reflector.setField(address, "country", "");
    Reflector.setField(address, "id", 0);
    Reflector.setField(address, "postcode", "");
    Reflector.setField(address, "city", "");
    Reflector.setField(address, "company", "");
    Reflector.setField(address, "addressLine", "");
    Reflector.setField(order, "shippingAddress", address);
    Reflector.setField(order, "firstName", "");
    Reflector.setField(order, "email", "");
    Reflector.setField(order, "id", 0);
    PowerMockito.when(orderRepository.save(or(isA(Order.class), isNull(Order.class))))
        .thenReturn(order);
    Reflector.setField(objectUnderTest, "orderRepo", orderRepository);
    final AddressRepository addressRepository = PowerMockito.mock(AddressRepository.class);
    PowerMockito.when(addressRepository.save(or(isA(Address.class), isNull(Address.class))))
        .thenReturn(null);
    Reflector.setField(objectUnderTest, "addressRepo", addressRepository);
    final PaymentForm paymentForm = null;
    final BindingResult bindingResult = PowerMockito.mock(BindingResult.class);
    final Method hasErrorsMethod = DTUMemberMatcher.method(BindingResult.class, "hasErrors");
    PowerMockito.doReturn(false).when(bindingResult, hasErrorsMethod).withNoArguments();
    final HashMap<String, Object> model = new HashMap<String, Object>();
    model.put("cart", null);
    final HttpSession session = PowerMockito.mock(HttpSession.class);
    final CustomerForm customerForm =
        (CustomerForm)Reflector.getInstance("com.diffblue.demo.ecommerce.forms.CustomerForm");
    Reflector.setField(customerForm, "email", null);
    Reflector.setField(customerForm, "phoneNumber", null);
    final AddressForm addressForm =
        (AddressForm)Reflector.getInstance("com.diffblue.demo.ecommerce.forms.AddressForm");
    Reflector.setField(addressForm, "postcode", "");
    Reflector.setField(addressForm, "city", "");
    Reflector.setField(addressForm, "country", "");
    Reflector.setField(addressForm, "company", "");
    Reflector.setField(addressForm, "addressLine", "");
    Reflector.setField(customerForm, "shippingAddressForm", addressForm);
    Reflector.setField(customerForm, "firstName", null);
    Reflector.setField(customerForm, "lastName", null);
    final Method getAttributeMethod =
        DTUMemberMatcher.method(HttpSession.class, "getAttribute", String.class);
    ((PowerMockitoStubber)PowerMockito.doReturn(null).doReturn(customerForm))
        .when(session, getAttributeMethod)
        .withArguments(or(isA(String.class), isNull(String.class)));

    // Act
    thrown.expect(NullPointerException.class);
    objectUnderTest.makePayment(paymentForm, bindingResult, model, session);

    // Method is not expected to return due to exception thrown
  }

  /*
   * Test generated by Diffblue Cover.
   * This test case covers:
   *  - conditional line 139 branch to line 139
   *  - conditional line 140 branch to line 140
   *  - conditional line 142 branch to line 142
   *  - conditional line 142 branch to line 150
   *  - conditional line 150 branch to line 150
   *  - conditional line 152 branch to line 152
   *  - conditional line 152 branch to line 153
   *  - conditional line 153 branch to line 153
   *  - conditional line 154 branch to line 154
   *  - conditional line 155 branch to line 155
   *  - conditional line 161 branch to line 161
   *  - conditional line 163 branch to line 163
   *  - conditional line 164 branch to line 164
   *  - conditional line 165 branch to line 165
   *  - conditional line 165 branch to line 163
   *  - conditional line 163 branch to line 163
   *  - conditional line 168 branch to line 168
   */
  @PrepareForTest({CheckoutController.class, HttpSession.class, AddressRepository.class,
                   OrderRepository.class, BindingResult.class})
  @Test
  public void
  makePaymentInputNullNotNull1NotNullOutputNullPointerException7()
      throws Exception, InvocationTargetException {

    // Arrange
    final CheckoutController objectUnderTest = (CheckoutController)Reflector.getInstance(
        "com.diffblue.demo.ecommerce.controllers.CheckoutController");
    final OrderItemRepository orderItemRepository = (OrderItemRepository)Reflector.getInstance(
        "com.diffblue.demo.ecommerce.repositories.OrderItemRepository");
    Reflector.setField(objectUnderTest, "orderItemRepo", orderItemRepository);
    final OrderRepository orderRepository = PowerMockito.mock(OrderRepository.class);
    final Order order = (Order)Reflector.getInstance("com.diffblue.demo.ecommerce.models.Order");
    Reflector.setField(order, "lastName", "");
    Reflector.setField(order, "phoneNumber", "");
    Reflector.setField(order, "orderRef", "");
    final Address address =
        (Address)Reflector.getInstance("com.diffblue.demo.ecommerce.models.Address");
    Reflector.setField(address, "country", "");
    Reflector.setField(address, "id", 0);
    Reflector.setField(address, "postcode", "");
    Reflector.setField(address, "city", "");
    Reflector.setField(address, "company", "");
    Reflector.setField(address, "addressLine", "");
    Reflector.setField(order, "shippingAddress", address);
    Reflector.setField(order, "firstName", "");
    Reflector.setField(order, "email", "");
    Reflector.setField(order, "id", 0);
    PowerMockito.when(orderRepository.save(or(isA(Order.class), isNull(Order.class))))
        .thenReturn(order);
    Reflector.setField(objectUnderTest, "orderRepo", orderRepository);
    final AddressRepository addressRepository = PowerMockito.mock(AddressRepository.class);
    PowerMockito.when(addressRepository.save(or(isA(Address.class), isNull(Address.class))))
        .thenReturn(null);
    Reflector.setField(objectUnderTest, "addressRepo", addressRepository);
    final PaymentForm paymentForm = null;
    final BindingResult bindingResult = PowerMockito.mock(BindingResult.class);
    final Method hasErrorsMethod = DTUMemberMatcher.method(BindingResult.class, "hasErrors");
    PowerMockito.doReturn(false).when(bindingResult, hasErrorsMethod).withNoArguments();
    final HashMap<String, Object> model = new HashMap<String, Object>();
    model.put("cart", null);
    final HttpSession session = PowerMockito.mock(HttpSession.class);
    final CustomerForm customerForm =
        (CustomerForm)Reflector.getInstance("com.diffblue.demo.ecommerce.forms.CustomerForm");
    Reflector.setField(customerForm, "email", null);
    Reflector.setField(customerForm, "phoneNumber", null);
    final AddressForm addressForm =
        (AddressForm)Reflector.getInstance("com.diffblue.demo.ecommerce.forms.AddressForm");
    Reflector.setField(addressForm, "postcode", "");
    Reflector.setField(addressForm, "city", "");
    Reflector.setField(addressForm, "country", "");
    Reflector.setField(addressForm, "company", "");
    Reflector.setField(addressForm, "addressLine", "");
    Reflector.setField(customerForm, "shippingAddressForm", addressForm);
    Reflector.setField(customerForm, "firstName", null);
    Reflector.setField(customerForm, "lastName", null);
    final Cart cart = (Cart)Reflector.getInstance("com.diffblue.demo.ecommerce.models.Cart");
    Reflector.setField(cart, "shipping", 0.0);
    Reflector.setField(cart, "cartItems", null);
    Reflector.setField(cart, "taxRate", -0.0);
    Reflector.setField(cart, "total", 0.0);
    Reflector.setField(cart, "subtotal", 0.0);
    Reflector.setField(cart, "tax", 0.0);
    final Method getAttributeMethod =
        DTUMemberMatcher.method(HttpSession.class, "getAttribute", String.class);
    ((PowerMockitoStubber)PowerMockito.doReturn(cart).doReturn(customerForm))
        .when(session, getAttributeMethod)
        .withArguments(or(isA(String.class), isNull(String.class)));

    // Act
    thrown.expect(NullPointerException.class);
    objectUnderTest.makePayment(paymentForm, bindingResult, model, session);

    // Method is not expected to return due to exception thrown
  }

  /*
   * Test generated by Diffblue Cover.
   * This test case covers:
   *  - conditional line 139 branch to line 139
   */
  @PrepareForTest({CheckoutController.class, HttpSession.class})
  @Test
  public void makePaymentInputNullNotNullNullNotNullOutputClassCastException()
      throws Exception, InvocationTargetException {

    // Arrange
    final CheckoutController objectUnderTest = (CheckoutController)Reflector.getInstance(
        "com.diffblue.demo.ecommerce.controllers.CheckoutController");
    final OrderItemRepository orderItemRepository = (OrderItemRepository)Reflector.getInstance(
        "com.diffblue.demo.ecommerce.repositories.OrderItemRepository");
    Reflector.setField(objectUnderTest, "orderItemRepo", orderItemRepository);
    Reflector.setField(objectUnderTest, "orderRepo", null);
    Reflector.setField(objectUnderTest, "addressRepo", null);
    final PaymentForm paymentForm = null;
    final BindingResult bindingResult =
        (BindingResult)Reflector.getInstance("org.springframework.validation.BindingResult");
    final Map<String, Object> model = null;
    final HttpSession session = PowerMockito.mock(HttpSession.class);
    final Method getAttributeMethod =
        DTUMemberMatcher.method(HttpSession.class, "getAttribute", String.class);
    PowerMockito.doReturn(0)
        .when(session, getAttributeMethod)
        .withArguments(or(isA(String.class), isNull(String.class)));

    // Act
    thrown.expect(ClassCastException.class);
    objectUnderTest.makePayment(paymentForm, bindingResult, model, session);

    // Method is not expected to return due to exception thrown
  }

  /*
   * Test generated by Diffblue Cover.
   * This test case covers:
   *  - conditional line 139 branch to line 139
   *  - conditional line 140 branch to line 140
   */
  @PrepareForTest({CheckoutController.class, HttpSession.class})
  @Test
  public void makePaymentInputNullNotNullNullNotNullOutputClassCastException2()
      throws Exception, InvocationTargetException {

    // Arrange
    final CheckoutController objectUnderTest = (CheckoutController)Reflector.getInstance(
        "com.diffblue.demo.ecommerce.controllers.CheckoutController");
    final OrderItemRepository orderItemRepository = (OrderItemRepository)Reflector.getInstance(
        "com.diffblue.demo.ecommerce.repositories.OrderItemRepository");
    Reflector.setField(objectUnderTest, "orderItemRepo", orderItemRepository);
    Reflector.setField(objectUnderTest, "orderRepo", null);
    final AddressRepository addressRepository = (AddressRepository)Reflector.getInstance(
        "com.diffblue.demo.ecommerce.repositories.AddressRepository");
    Reflector.setField(objectUnderTest, "addressRepo", addressRepository);
    final PaymentForm paymentForm = null;
    final BindingResult bindingResult =
        (BindingResult)Reflector.getInstance("org.springframework.validation.BindingResult");
    final Map<String, Object> model = null;
    final HttpSession session = PowerMockito.mock(HttpSession.class);
    final Cart cart = (Cart)Reflector.getInstance("com.diffblue.demo.ecommerce.models.Cart");
    Reflector.setField(cart, "shipping", 0.0);
    Reflector.setField(cart, "cartItems", null);
    Reflector.setField(cart, "taxRate", 0.0);
    Reflector.setField(cart, "total", 0.0);
    Reflector.setField(cart, "subtotal", 0.0);
    Reflector.setField(cart, "tax", 0.0);
    final Method getAttributeMethod =
        DTUMemberMatcher.method(HttpSession.class, "getAttribute", String.class);
    ((PowerMockitoStubber)PowerMockito.doReturn(null).doReturn(cart))
        .when(session, getAttributeMethod)
        .withArguments(or(isA(String.class), isNull(String.class)));

    // Act
    thrown.expect(ClassCastException.class);
    objectUnderTest.makePayment(paymentForm, bindingResult, model, session);

    // Method is not expected to return due to exception thrown
  }

  /*
   * Test generated by Diffblue Cover.
   * This test case covers:
   *  - conditional line 139 branch to line 139
   */

  @Test
  public void makePaymentInputNullNotNullNullNullOutputNullPointerException()
      throws InvocationTargetException {

    // Arrange
    final CheckoutController objectUnderTest = (CheckoutController)Reflector.getInstance(
        "com.diffblue.demo.ecommerce.controllers.CheckoutController");
    final OrderItemRepository orderItemRepository = (OrderItemRepository)Reflector.getInstance(
        "com.diffblue.demo.ecommerce.repositories.OrderItemRepository");
    Reflector.setField(objectUnderTest, "orderItemRepo", orderItemRepository);
    Reflector.setField(objectUnderTest, "orderRepo", null);
    Reflector.setField(objectUnderTest, "addressRepo", null);
    final PaymentForm paymentForm = null;
    final BindingResult bindingResult =
        (BindingResult)Reflector.getInstance("org.springframework.validation.BindingResult");
    final Map<String, Object> model = null;
    final HttpSession session = null;

    // Act
    thrown.expect(NullPointerException.class);
    objectUnderTest.makePayment(paymentForm, bindingResult, model, session);

    // Method is not expected to return due to exception thrown
  }

  /*
   * Test generated by Diffblue Cover.
   * This test case covers:
   *  - conditional line 139 branch to line 139
   *  - conditional line 140 branch to line 140
   *  - conditional line 142 branch to line 142
   */
  @PrepareForTest({CheckoutController.class, HttpSession.class})
  @Test
  public void makePaymentInputNullNull1NotNullOutputNullPointerException()
      throws Exception, InvocationTargetException {

    // Arrange
    final CheckoutController objectUnderTest = (CheckoutController)Reflector.getInstance(
        "com.diffblue.demo.ecommerce.controllers.CheckoutController");
    final OrderItemRepository orderItemRepository = (OrderItemRepository)Reflector.getInstance(
        "com.diffblue.demo.ecommerce.repositories.OrderItemRepository");
    Reflector.setField(objectUnderTest, "orderItemRepo", orderItemRepository);
    Reflector.setField(objectUnderTest, "orderRepo", null);
    final AddressRepository addressRepository = (AddressRepository)Reflector.getInstance(
        "com.diffblue.demo.ecommerce.repositories.AddressRepository");
    Reflector.setField(objectUnderTest, "addressRepo", addressRepository);
    final PaymentForm paymentForm = null;
    final BindingResult bindingResult = null;
    final HashMap<String, Object> model = new HashMap<String, Object>();
    model.put("cart", null);
    final HttpSession session = PowerMockito.mock(HttpSession.class);
    final Cart cart = (Cart)Reflector.getInstance("com.diffblue.demo.ecommerce.models.Cart");
    Reflector.setField(cart, "shipping", 0.0);
    final HashMap<Product, Integer> hashMap = new HashMap<Product, Integer>();
    final Product product =
        (Product)Reflector.getInstance("com.diffblue.demo.ecommerce.models.Product");
    Reflector.setField(product, "description", "");
    Reflector.setField(product, "size", "");
    final Category category =
        (Category)Reflector.getInstance("com.diffblue.demo.ecommerce.models.Category");
    Reflector.setField(category, "products", null);
    Reflector.setField(category, "id", 0);
    Reflector.setField(category, "name", "");
    Reflector.setField(product, "category", category);
    Reflector.setField(product, "photo", "");
    Reflector.setField(product, "name", "");
    final Collection collection =
        (Collection)Reflector.getInstance("com.diffblue.demo.ecommerce.models.Collection");
    Reflector.setField(collection, "products", null);
    Reflector.setField(collection, "id", 0);
    Reflector.setField(collection, "name", "");
    Reflector.setField(product, "collection", collection);
    Reflector.setField(product, "id", 0);
    Reflector.setField(product, "sku", "");
    Reflector.setField(product, "price", 0.0);
    hashMap.put(product, 0);
    Reflector.setField(cart, "cartItems", hashMap);
    Reflector.setField(cart, "taxRate", -0.0);
    Reflector.setField(cart, "total", 0.0);
    Reflector.setField(cart, "subtotal", 0.0);
    Reflector.setField(cart, "tax", 0.0);
    final Method getAttributeMethod =
        DTUMemberMatcher.method(HttpSession.class, "getAttribute", String.class);
    ((PowerMockitoStubber)PowerMockito.doReturn(cart).doReturn(null))
        .when(session, getAttributeMethod)
        .withArguments(or(isA(String.class), isNull(String.class)));

    // Act
    thrown.expect(NullPointerException.class);
    objectUnderTest.makePayment(paymentForm, bindingResult, model, session);

    // Method is not expected to return due to exception thrown
  }

  /*
   * Test generated by Diffblue Cover.
   * This test case covers:
   *  - conditional line 93 branch to line 98
   */
  @PrepareForTest({CheckoutController.class, HttpSession.class, BindingResult.class})
  @Test
  public void saveCustomerInformationInputNotNullNotNull0NotNullOutputNotNull()
      throws Exception, InvocationTargetException {

    // Arrange
    final CheckoutController objectUnderTest = (CheckoutController)Reflector.getInstance(
        "com.diffblue.demo.ecommerce.controllers.CheckoutController");
    Reflector.setField(objectUnderTest, "orderItemRepo", null);
    Reflector.setField(objectUnderTest, "orderRepo", null);
    Reflector.setField(objectUnderTest, "addressRepo", null);
    final CustomerForm customerForm = new CustomerForm();
    final BindingResult bindingResult = PowerMockito.mock(BindingResult.class);
    final Method hasErrorsMethod = DTUMemberMatcher.method(BindingResult.class, "hasErrors");
    PowerMockito.doReturn(false).when(bindingResult, hasErrorsMethod).withNoArguments();
    final HashMap<String, Object> model = new HashMap<String, Object>();
    final HttpSession session = PowerMockito.mock(HttpSession.class);

    // Act
    final String retval =
        objectUnderTest.saveCustomerInformation(customerForm, bindingResult, model, session);

    // Assert result
    Assert.assertEquals("redirect:/payment", retval);
  }

  /*
   * Test generated by Diffblue Cover.
   * This test case covers:
   *  - conditional line 93 branch to line 94
   *  - conditional line 94 branch to line 94
   *  - conditional line 95 branch to line 95
   */
  @PrepareForTest({BindingResult.class, CheckoutController.class, HttpSession.class})
  @Test
  public void saveCustomerInformationInputNullNotNull0NotNullOutputNotNull()
      throws Exception, InvocationTargetException {

    // Arrange
    final CheckoutController objectUnderTest = (CheckoutController)Reflector.getInstance(
        "com.diffblue.demo.ecommerce.controllers.CheckoutController");
    Reflector.setField(objectUnderTest, "orderItemRepo", null);
    Reflector.setField(objectUnderTest, "orderRepo", null);
    Reflector.setField(objectUnderTest, "addressRepo", null);
    final CustomerForm customerForm = null;
    final BindingResult bindingResult = PowerMockito.mock(BindingResult.class);
    final Method hasErrorsMethod = DTUMemberMatcher.method(BindingResult.class, "hasErrors");
    PowerMockito.doReturn(true).when(bindingResult, hasErrorsMethod).withNoArguments();
    final HashMap<String, Object> model = new HashMap<String, Object>();
    final HttpSession session = PowerMockito.mock(HttpSession.class);
    final Method getAttributeMethod =
        DTUMemberMatcher.method(HttpSession.class, "getAttribute", String.class);
    PowerMockito.doReturn(null)
        .when(session, getAttributeMethod)
        .withArguments(or(isA(String.class), isNull(String.class)));

    // Act
    final String retval =
        objectUnderTest.saveCustomerInformation(customerForm, bindingResult, model, session);

    // Assert result
    Assert.assertEquals("Checkout", retval);
  }

  /*
   * Test generated by Diffblue Cover.
   * This test case covers:
   *  - conditional line 62 branch to line 65
   *  - conditional line 65 branch to line 65
   *  - conditional line 66 branch to line 66
   *  - conditional line 67 branch to line 73
   *  - conditional line 73 branch to line 73
   */
  @PrepareForTest({CheckoutController.class, HttpSession.class})
  @Test
  public void viewCheckoutPageInput0NotNullNullOutputNotNull()
      throws Exception, InvocationTargetException {

    // Arrange
    final CheckoutController objectUnderTest = (CheckoutController)Reflector.getInstance(
        "com.diffblue.demo.ecommerce.controllers.CheckoutController");
    final OrderItemRepository orderItemRepository = (OrderItemRepository)Reflector.getInstance(
        "com.diffblue.demo.ecommerce.repositories.OrderItemRepository");
    Reflector.setField(objectUnderTest, "orderItemRepo", orderItemRepository);
    Reflector.setField(objectUnderTest, "orderRepo", null);
    final AddressRepository addressRepository = (AddressRepository)Reflector.getInstance(
        "com.diffblue.demo.ecommerce.repositories.AddressRepository");
    Reflector.setField(objectUnderTest, "addressRepo", addressRepository);
    final HashMap<String, Object> model = new HashMap<String, Object>();
    final HttpSession session = PowerMockito.mock(HttpSession.class);
    final Cart cart = (Cart)Reflector.getInstance("com.diffblue.demo.ecommerce.models.Cart");
    Reflector.setField(cart, "shipping", 0.0);
    final HashMap<Product, Integer> hashMap = new HashMap<Product, Integer>();
    hashMap.put(null, 0);
    Reflector.setField(cart, "cartItems", hashMap);
    Reflector.setField(cart, "taxRate", 0.0);
    Reflector.setField(cart, "total", 0.0);
    Reflector.setField(cart, "subtotal", 0.0);
    Reflector.setField(cart, "tax", 0.0);
    final Method getAttributeMethod =
        DTUMemberMatcher.method(HttpSession.class, "getAttribute", String.class);
    ((PowerMockitoStubber)PowerMockito.doReturn(0).doReturn(cart))
        .when(session, getAttributeMethod)
        .withArguments(or(isA(String.class), isNull(String.class)));
    final CustomerForm customerForm = null;

    // Act
    final String retval = objectUnderTest.viewCheckoutPage(model, session, customerForm);

    // Assert result
    Assert.assertEquals("Checkout", retval);
  }

  /*
   * Test generated by Diffblue Cover.
   * This test case covers:
   *  - conditional line 62 branch to line 63
   *  - conditional line 63 branch to line 75
   *  - conditional line 76 branch to line 76
   */
  @PrepareForTest({CheckoutController.class, HttpSession.class})
  @Test
  public void viewCheckoutPageInput0NotNullNullOutputNotNull2()
      throws Exception, InvocationTargetException {

    // Arrange
    final CheckoutController objectUnderTest = (CheckoutController)Reflector.getInstance(
        "com.diffblue.demo.ecommerce.controllers.CheckoutController");
    final OrderItemRepository orderItemRepository = (OrderItemRepository)Reflector.getInstance(
        "com.diffblue.demo.ecommerce.repositories.OrderItemRepository");
    Reflector.setField(objectUnderTest, "orderItemRepo", orderItemRepository);
    Reflector.setField(objectUnderTest, "orderRepo", null);
    final AddressRepository addressRepository = (AddressRepository)Reflector.getInstance(
        "com.diffblue.demo.ecommerce.repositories.AddressRepository");
    Reflector.setField(objectUnderTest, "addressRepo", addressRepository);
    final HashMap<String, Object> model = new HashMap<String, Object>();
    final HttpSession session = PowerMockito.mock(HttpSession.class);
    final Method getAttributeMethod =
        DTUMemberMatcher.method(HttpSession.class, "getAttribute", String.class);
    PowerMockito.doReturn(null)
        .when(session, getAttributeMethod)
        .withArguments(or(isA(String.class), isNull(String.class)));
    final CustomerForm customerForm = null;
    final EmptyCartException emptyCartException = PowerMockito.mock(EmptyCartException.class);
    PowerMockito.doCallRealMethod().when(emptyCartException);
    emptyCartException.getMessage();
    PowerMockito.whenNew(EmptyCartException.class)
        .withParameterTypes(int.class, String.class)
        .withArguments(anyInt(), or(isA(String.class), isNull(String.class)))
        .thenReturn(emptyCartException);

    // Act
    final String retval = objectUnderTest.viewCheckoutPage(model, session, customerForm);

    // Assert result
    Assert.assertEquals("redirect:/exception", retval);
  }

  /*
   * Test generated by Diffblue Cover.
   * This test case covers:
   *  - conditional line 62 branch to line 65
   *  - conditional line 65 branch to line 65
   *  - conditional line 66 branch to line 66
   *  - conditional line 67 branch to line 68
   *  - conditional line 68 branch to line 68
   *  - conditional line 68 branch to line 75
   *  - conditional line 76 branch to line 76
   */
  @PrepareForTest({CheckoutController.class, HttpSession.class})
  @Test
  public void viewCheckoutPageInput0NotNullNullOutputNotNull3()
      throws Exception, InvocationTargetException {

    // Arrange
    final CheckoutController objectUnderTest = (CheckoutController)Reflector.getInstance(
        "com.diffblue.demo.ecommerce.controllers.CheckoutController");
    final OrderItemRepository orderItemRepository = (OrderItemRepository)Reflector.getInstance(
        "com.diffblue.demo.ecommerce.repositories.OrderItemRepository");
    Reflector.setField(objectUnderTest, "orderItemRepo", orderItemRepository);
    Reflector.setField(objectUnderTest, "orderRepo", null);
    final AddressRepository addressRepository = (AddressRepository)Reflector.getInstance(
        "com.diffblue.demo.ecommerce.repositories.AddressRepository");
    Reflector.setField(objectUnderTest, "addressRepo", addressRepository);
    final HashMap<String, Object> model = new HashMap<String, Object>();
    final HttpSession session = PowerMockito.mock(HttpSession.class);
    final Cart cart = (Cart)Reflector.getInstance("com.diffblue.demo.ecommerce.models.Cart");
    Reflector.setField(cart, "shipping", 0.0);
    final HashMap<Product, Integer> hashMap = new HashMap<Product, Integer>();
    final Product product =
        (Product)Reflector.getInstance("com.diffblue.demo.ecommerce.models.Product");
    Reflector.setField(product, "description", "");
    Reflector.setField(product, "size", "");
    final Category category =
        (Category)Reflector.getInstance("com.diffblue.demo.ecommerce.models.Category");
    final ArrayList<Product> arrayList = new ArrayList<Product>();
    arrayList.add(null);
    Reflector.setField(category, "products", arrayList);
    Reflector.setField(category, "id", 0);
    Reflector.setField(category, "name", "");
    Reflector.setField(product, "category", category);
    Reflector.setField(product, "photo", "");
    Reflector.setField(product, "name", "");
    final Collection collection =
        (Collection)Reflector.getInstance("com.diffblue.demo.ecommerce.models.Collection");
    final ArrayList<Product> arrayList1 = new ArrayList<Product>();
    arrayList1.add(null);
    Reflector.setField(collection, "products", arrayList1);
    Reflector.setField(collection, "id", 0);
    Reflector.setField(collection, "name", "");
    Reflector.setField(product, "collection", collection);
    Reflector.setField(product, "id", 0);
    Reflector.setField(product, "sku", "");
    Reflector.setField(product, "price", 0.0);
    hashMap.put(product, -2_147_483_648);
    Reflector.setField(cart, "cartItems", hashMap);
    Reflector.setField(cart, "taxRate", 0.0);
    Reflector.setField(cart, "total", 0.0);
    Reflector.setField(cart, "subtotal", 0.0);
    Reflector.setField(cart, "tax", 0.0);
    final Method getAttributeMethod =
        DTUMemberMatcher.method(HttpSession.class, "getAttribute", String.class);
    ((PowerMockitoStubber)PowerMockito.doReturn(0).doReturn(cart))
        .when(session, getAttributeMethod)
        .withArguments(or(isA(String.class), isNull(String.class)));
    final CustomerForm customerForm = null;
    final InvalidCartItemException invalidCartItemException =
        PowerMockito.mock(InvalidCartItemException.class);
    PowerMockito.doCallRealMethod().when(invalidCartItemException);
    invalidCartItemException.getMessage();
    PowerMockito.whenNew(InvalidCartItemException.class)
        .withParameterTypes(int.class, String.class, Product.class)
        .withArguments(anyInt(), or(isA(String.class), isNull(String.class)),
                       or(isA(Product.class), isNull(Product.class)))
        .thenReturn(invalidCartItemException);

    // Act
    final String retval = objectUnderTest.viewCheckoutPage(model, session, customerForm);

    // Assert result
    Assert.assertEquals("redirect:/exception", retval);
  }

  /*
   * Test generated by Diffblue Cover.
   * This test case covers:
   *  - conditional line 191 branch to line 191
   *  - conditional line 191 branch to line 192
   *  - conditional line 192 branch to line 192
   *  - conditional line 193 branch to line 193
   */
  @PrepareForTest({CheckoutController.class, HttpSession.class})
  @Test
  public void viewOrderCompletePageInput1NotNullOutputNotNull()
      throws Exception, InvocationTargetException {

    // Arrange
    final CheckoutController objectUnderTest = (CheckoutController)Reflector.getInstance(
        "com.diffblue.demo.ecommerce.controllers.CheckoutController");
    final OrderItemRepository orderItemRepository = (OrderItemRepository)Reflector.getInstance(
        "com.diffblue.demo.ecommerce.repositories.OrderItemRepository");
    Reflector.setField(objectUnderTest, "orderItemRepo", orderItemRepository);
    final OrderRepository orderRepository = (OrderRepository)Reflector.getInstance(
        "com.diffblue.demo.ecommerce.repositories.OrderRepository");
    Reflector.setField(objectUnderTest, "orderRepo", orderRepository);
    final AddressRepository addressRepository = (AddressRepository)Reflector.getInstance(
        "com.diffblue.demo.ecommerce.repositories.AddressRepository");
    Reflector.setField(objectUnderTest, "addressRepo", addressRepository);
    final HashMap<String, Object> model = new HashMap<String, Object>();
    model.put("orderRef", 0);
    final HttpSession session = PowerMockito.mock(HttpSession.class);
    final Method getAttributeMethod =
        DTUMemberMatcher.method(HttpSession.class, "getAttribute", String.class);
    ((PowerMockitoStubber)PowerMockito.doReturn(0).doReturn(0).doReturn(null).doReturn(null))
        .when(session, getAttributeMethod)
        .withArguments(or(isA(String.class), isNull(String.class)));

    // Act
    final String retval = objectUnderTest.viewOrderCompletePage(model, session);

    // Assert result
    Assert.assertEquals("OrderComplete", retval);
  }

  /*
   * Test generated by Diffblue Cover.
   * This test case covers:
   *  - conditional line 191 branch to line 196
   */
  @PrepareForTest({CheckoutController.class, HttpSession.class})
  @Test
  public void viewOrderCompletePageInputNullNotNullOutputNotNull()
      throws Exception, InvocationTargetException {

    // Arrange
    final CheckoutController objectUnderTest = (CheckoutController)Reflector.getInstance(
        "com.diffblue.demo.ecommerce.controllers.CheckoutController");
    Reflector.setField(objectUnderTest, "orderItemRepo", null);
    Reflector.setField(objectUnderTest, "orderRepo", null);
    Reflector.setField(objectUnderTest, "addressRepo", null);
    final Map<String, Object> model = null;
    final HttpSession session = PowerMockito.mock(HttpSession.class);
    final Method getAttributeMethod =
        DTUMemberMatcher.method(HttpSession.class, "getAttribute", String.class);
    PowerMockito.doReturn(null)
        .when(session, getAttributeMethod)
        .withArguments(or(isA(String.class), isNull(String.class)));

    // Act
    final String retval = objectUnderTest.viewOrderCompletePage(model, session);

    // Assert result
    Assert.assertEquals("redirect:/", retval);
  }

  /*
   * Test generated by Diffblue Cover.
   * This test case covers:
   *  - conditional line 191 branch to line 191
   *  - conditional line 191 branch to line 196
   */
  @PrepareForTest({CheckoutController.class, HttpSession.class})
  @Test
  public void viewOrderCompletePageInputNullNotNullOutputNotNull2()
      throws Exception, InvocationTargetException {

    // Arrange
    final CheckoutController objectUnderTest = (CheckoutController)Reflector.getInstance(
        "com.diffblue.demo.ecommerce.controllers.CheckoutController");
    Reflector.setField(objectUnderTest, "orderItemRepo", null);
    Reflector.setField(objectUnderTest, "orderRepo", null);
    Reflector.setField(objectUnderTest, "addressRepo", null);
    final Map<String, Object> model = null;
    final HttpSession session = PowerMockito.mock(HttpSession.class);
    final Method getAttributeMethod =
        DTUMemberMatcher.method(HttpSession.class, "getAttribute", String.class);
    ((PowerMockitoStubber)PowerMockito.doReturn(0).doReturn(null))
        .when(session, getAttributeMethod)
        .withArguments(or(isA(String.class), isNull(String.class)));

    // Act
    final String retval = objectUnderTest.viewOrderCompletePage(model, session);

    // Assert result
    Assert.assertEquals("redirect:/", retval);
  }

  /*
   * Test generated by Diffblue Cover.
   * This test case covers:
   *  - conditional line 191 branch to line 191
   *  - conditional line 191 branch to line 192
   *  - conditional line 192 branch to line 192
   */
  @PrepareForTest({CheckoutController.class, HttpSession.class})
  @Test
  public void viewOrderCompletePageInputNullNotNullOutputNullPointerException()
      throws Exception, InvocationTargetException {

    // Arrange
    final CheckoutController objectUnderTest = (CheckoutController)Reflector.getInstance(
        "com.diffblue.demo.ecommerce.controllers.CheckoutController");
    final OrderItemRepository orderItemRepository = (OrderItemRepository)Reflector.getInstance(
        "com.diffblue.demo.ecommerce.repositories.OrderItemRepository");
    Reflector.setField(objectUnderTest, "orderItemRepo", orderItemRepository);
    final OrderRepository orderRepository = (OrderRepository)Reflector.getInstance(
        "com.diffblue.demo.ecommerce.repositories.OrderRepository");
    Reflector.setField(objectUnderTest, "orderRepo", orderRepository);
    final AddressRepository addressRepository = (AddressRepository)Reflector.getInstance(
        "com.diffblue.demo.ecommerce.repositories.AddressRepository");
    Reflector.setField(objectUnderTest, "addressRepo", addressRepository);
    final Map<String, Object> model = null;
    final HttpSession session = PowerMockito.mock(HttpSession.class);
    final Method getAttributeMethod =
        DTUMemberMatcher.method(HttpSession.class, "getAttribute", String.class);
    ((PowerMockitoStubber)PowerMockito.doReturn(0).doReturn(0).doReturn(null))
        .when(session, getAttributeMethod)
        .withArguments(or(isA(String.class), isNull(String.class)));

    // Act
    thrown.expect(NullPointerException.class);
    objectUnderTest.viewOrderCompletePage(model, session);

    // Method is not expected to return due to exception thrown
  }

  /*
   * Test generated by Diffblue Cover.
   * This test case covers:
   *  - conditional line 112 branch to line 112
   *  - conditional line 112 branch to line 113
   *  - conditional line 113 branch to line 113
   *  - conditional line 113 branch to line 115
   *  - conditional line 115 branch to line 115
   *  - conditional line 116 branch to line 116
   *  - conditional line 117 branch to line 117
   *  - conditional line 118 branch to line 118
   */
  @PrepareForTest({CheckoutController.class, HttpSession.class})
  @Test
  public void viewPaymentPageInput0NotNullNullOutputNotNull()
      throws Exception, InvocationTargetException {

    // Arrange
    final CheckoutController objectUnderTest = (CheckoutController)Reflector.getInstance(
        "com.diffblue.demo.ecommerce.controllers.CheckoutController");
    final OrderItemRepository orderItemRepository = (OrderItemRepository)Reflector.getInstance(
        "com.diffblue.demo.ecommerce.repositories.OrderItemRepository");
    Reflector.setField(objectUnderTest, "orderItemRepo", orderItemRepository);
    Reflector.setField(objectUnderTest, "orderRepo", null);
    final AddressRepository addressRepository = (AddressRepository)Reflector.getInstance(
        "com.diffblue.demo.ecommerce.repositories.AddressRepository");
    Reflector.setField(objectUnderTest, "addressRepo", addressRepository);
    final HashMap<String, Object> model = new HashMap<String, Object>();
    final HttpSession session = PowerMockito.mock(HttpSession.class);
    final CustomerForm customerForm =
        (CustomerForm)Reflector.getInstance("com.diffblue.demo.ecommerce.forms.CustomerForm");
    Reflector.setField(customerForm, "email", null);
    Reflector.setField(customerForm, "phoneNumber", null);
    Reflector.setField(customerForm, "shippingAddressForm", null);
    Reflector.setField(customerForm, "firstName", null);
    Reflector.setField(customerForm, "lastName", null);
    final Cart cart = (Cart)Reflector.getInstance("com.diffblue.demo.ecommerce.models.Cart");
    Reflector.setField(cart, "shipping", 0.0);
    Reflector.setField(cart, "cartItems", null);
    Reflector.setField(cart, "taxRate", 0.0);
    Reflector.setField(cart, "total", 0.0);
    Reflector.setField(cart, "subtotal", 0.0);
    Reflector.setField(cart, "tax", 0.0);
    final Method getAttributeMethod =
        DTUMemberMatcher.method(HttpSession.class, "getAttribute", String.class);
    ((PowerMockitoStubber)PowerMockito.doReturn(cart)
         .doReturn(customerForm)
         .doReturn(null)
         .doReturn(null))
        .when(session, getAttributeMethod)
        .withArguments(or(isA(String.class), isNull(String.class)));
    final PaymentForm paymentForm = null;

    // Act
    final String retval = objectUnderTest.viewPaymentPage(model, session, paymentForm);

    // Assert result
    Assert.assertEquals("Payment", retval);
  }

  /*
   * Test generated by Diffblue Cover.
   * This test case covers:
   *  - conditional line 112 branch to line 123
   */
  @PrepareForTest({CheckoutController.class, HttpSession.class})
  @Test
  public void viewPaymentPageInput1NotNullNullOutputNotNull()
      throws Exception, InvocationTargetException {

    // Arrange
    final CheckoutController objectUnderTest = (CheckoutController)Reflector.getInstance(
        "com.diffblue.demo.ecommerce.controllers.CheckoutController");
    Reflector.setField(objectUnderTest, "orderItemRepo", null);
    Reflector.setField(objectUnderTest, "orderRepo", null);
    Reflector.setField(objectUnderTest, "addressRepo", null);
    final HashMap<String, Object> model = new HashMap<String, Object>();
    model.put(null, null);
    final HttpSession session = PowerMockito.mock(HttpSession.class);
    final Method getAttributeMethod =
        DTUMemberMatcher.method(HttpSession.class, "getAttribute", String.class);
    PowerMockito.doReturn(null)
        .when(session, getAttributeMethod)
        .withArguments(or(isA(String.class), isNull(String.class)));
    final PaymentForm paymentForm = null;

    // Act
    final String retval = objectUnderTest.viewPaymentPage(model, session, paymentForm);

    // Assert result
    Assert.assertEquals("redirect:/checkout", retval);
  }

  /*
   * Test generated by Diffblue Cover.
   * This test case covers:
   *  - conditional line 112 branch to line 112
   *  - conditional line 112 branch to line 113
   *  - conditional line 113 branch to line 113
   *  - conditional line 113 branch to line 115
   *  - conditional line 115 branch to line 115
   */
  @PrepareForTest({CheckoutController.class, HttpSession.class})
  @Test
  public void viewPaymentPageInputNullNotNullNullOutputClassCastException()
      throws Exception, InvocationTargetException {

    // Arrange
    final CheckoutController objectUnderTest = (CheckoutController)Reflector.getInstance(
        "com.diffblue.demo.ecommerce.controllers.CheckoutController");
    final OrderItemRepository orderItemRepository = (OrderItemRepository)Reflector.getInstance(
        "com.diffblue.demo.ecommerce.repositories.OrderItemRepository");
    Reflector.setField(objectUnderTest, "orderItemRepo", orderItemRepository);
    Reflector.setField(objectUnderTest, "orderRepo", null);
    final AddressRepository addressRepository = (AddressRepository)Reflector.getInstance(
        "com.diffblue.demo.ecommerce.repositories.AddressRepository");
    Reflector.setField(objectUnderTest, "addressRepo", addressRepository);
    final Map<String, Object> model = null;
    final HttpSession session = PowerMockito.mock(HttpSession.class);
    final CustomerForm customerForm1 =
        (CustomerForm)Reflector.getInstance("com.diffblue.demo.ecommerce.forms.CustomerForm");
    Reflector.setField(customerForm1, "email", null);
    Reflector.setField(customerForm1, "phoneNumber", null);
    Reflector.setField(customerForm1, "shippingAddressForm", null);
    Reflector.setField(customerForm1, "firstName", null);
    Reflector.setField(customerForm1, "lastName", null);
    final CustomerForm customerForm =
        (CustomerForm)Reflector.getInstance("com.diffblue.demo.ecommerce.forms.CustomerForm");
    Reflector.setField(customerForm, "email", null);
    Reflector.setField(customerForm, "phoneNumber", null);
    Reflector.setField(customerForm, "shippingAddressForm", null);
    Reflector.setField(customerForm, "firstName", null);
    Reflector.setField(customerForm, "lastName", null);
    final Method getAttributeMethod =
        DTUMemberMatcher.method(HttpSession.class, "getAttribute", String.class);
    ((PowerMockitoStubber)PowerMockito.doReturn(customerForm).doReturn(customerForm1).doReturn(0))
        .when(session, getAttributeMethod)
        .withArguments(or(isA(String.class), isNull(String.class)));
    final PaymentForm paymentForm = null;

    // Act
    thrown.expect(ClassCastException.class);
    objectUnderTest.viewPaymentPage(model, session, paymentForm);

    // Method is not expected to return due to exception thrown
  }

  /*
   * Test generated by Diffblue Cover.
   * This test case covers:
   *  - conditional line 112 branch to line 112
   *  - conditional line 112 branch to line 113
   *  - conditional line 113 branch to line 113
   *  - conditional line 113 branch to line 115
   *  - conditional line 115 branch to line 115
   *  - conditional line 116 branch to line 116
   */
  @PrepareForTest({CheckoutController.class, HttpSession.class})
  @Test
  public void viewPaymentPageInputNullNotNullNullOutputClassCastException2()
      throws Exception, InvocationTargetException {

    // Arrange
    final CheckoutController objectUnderTest = (CheckoutController)Reflector.getInstance(
        "com.diffblue.demo.ecommerce.controllers.CheckoutController");
    final OrderItemRepository orderItemRepository = (OrderItemRepository)Reflector.getInstance(
        "com.diffblue.demo.ecommerce.repositories.OrderItemRepository");
    Reflector.setField(objectUnderTest, "orderItemRepo", orderItemRepository);
    Reflector.setField(objectUnderTest, "orderRepo", null);
    final AddressRepository addressRepository = (AddressRepository)Reflector.getInstance(
        "com.diffblue.demo.ecommerce.repositories.AddressRepository");
    Reflector.setField(objectUnderTest, "addressRepo", addressRepository);
    final Map<String, Object> model = null;
    final HttpSession session = PowerMockito.mock(HttpSession.class);
    final Cart cart1 = (Cart)Reflector.getInstance("com.diffblue.demo.ecommerce.models.Cart");
    Reflector.setField(cart1, "shipping", 0.0);
    Reflector.setField(cart1, "cartItems", null);
    Reflector.setField(cart1, "taxRate", 0.0);
    Reflector.setField(cart1, "total", 0.0);
    Reflector.setField(cart1, "subtotal", 0.0);
    Reflector.setField(cart1, "tax", 0.0);
    final CustomerForm customerForm =
        (CustomerForm)Reflector.getInstance("com.diffblue.demo.ecommerce.forms.CustomerForm");
    Reflector.setField(customerForm, "email", null);
    Reflector.setField(customerForm, "phoneNumber", null);
    Reflector.setField(customerForm, "shippingAddressForm", null);
    Reflector.setField(customerForm, "firstName", null);
    Reflector.setField(customerForm, "lastName", null);
    final Cart cart = (Cart)Reflector.getInstance("com.diffblue.demo.ecommerce.models.Cart");
    Reflector.setField(cart, "shipping", 0.0);
    final HashMap<Product, Integer> hashMap = new HashMap<Product, Integer>();
    Reflector.setField(cart, "cartItems", hashMap);
    Reflector.setField(cart, "taxRate", 0.0);
    Reflector.setField(cart, "total", 0.0);
    Reflector.setField(cart, "subtotal", 0.0);
    Reflector.setField(cart, "tax", 0.0);
    final Method getAttributeMethod =
        DTUMemberMatcher.method(HttpSession.class, "getAttribute", String.class);
    ((PowerMockitoStubber)PowerMockito.doReturn(cart)
         .doReturn(customerForm)
         .doReturn(null)
         .doReturn(cart1))
        .when(session, getAttributeMethod)
        .withArguments(or(isA(String.class), isNull(String.class)));
    final PaymentForm paymentForm = null;

    // Act
    thrown.expect(ClassCastException.class);
    objectUnderTest.viewPaymentPage(model, session, paymentForm);

    // Method is not expected to return due to exception thrown
  }

  /*
   * Test generated by Diffblue Cover.
   * This test case covers:
   *  - conditional line 112 branch to line 113
   *  - conditional line 113 branch to line 123
   */
  @PrepareForTest({CheckoutController.class, HttpSession.class})
  @Test
  public void viewPaymentPageInputNullNotNullNullOutputNotNull()
      throws Exception, InvocationTargetException {

    // Arrange
    final CheckoutController objectUnderTest = (CheckoutController)Reflector.getInstance(
        "com.diffblue.demo.ecommerce.controllers.CheckoutController");
    Reflector.setField(objectUnderTest, "orderItemRepo", null);
    Reflector.setField(objectUnderTest, "orderRepo", null);
    Reflector.setField(objectUnderTest, "addressRepo", null);
    final Map<String, Object> model = null;
    final HttpSession session = PowerMockito.mock(HttpSession.class);
    final Method getAttributeMethod =
        DTUMemberMatcher.method(HttpSession.class, "getAttribute", String.class);
    ((PowerMockitoStubber)PowerMockito.doReturn(0).doReturn(null))
        .when(session, getAttributeMethod)
        .withArguments(or(isA(String.class), isNull(String.class)));
    final PaymentForm paymentForm = null;

    // Act
    final String retval = objectUnderTest.viewPaymentPage(model, session, paymentForm);

    // Assert result
    Assert.assertEquals("redirect:/checkout", retval);
  }

  /*
   * Test generated by Diffblue Cover.
   * This test case covers:
   *  - conditional line 112 branch to line 112
   *  - conditional line 112 branch to line 113
   *  - conditional line 113 branch to line 113
   *  - conditional line 113 branch to line 115
   *  - conditional line 115 branch to line 115
   *  - conditional line 116 branch to line 116
   *  - conditional line 117 branch to line 117
   */
  @PrepareForTest({CheckoutController.class, HttpSession.class})
  @Test
  public void viewPaymentPageInputNullNotNullNullOutputNullPointerException()
      throws Exception, InvocationTargetException {

    // Arrange
    final CheckoutController objectUnderTest = (CheckoutController)Reflector.getInstance(
        "com.diffblue.demo.ecommerce.controllers.CheckoutController");
    final OrderItemRepository orderItemRepository = (OrderItemRepository)Reflector.getInstance(
        "com.diffblue.demo.ecommerce.repositories.OrderItemRepository");
    Reflector.setField(objectUnderTest, "orderItemRepo", orderItemRepository);
    Reflector.setField(objectUnderTest, "orderRepo", null);
    final AddressRepository addressRepository = (AddressRepository)Reflector.getInstance(
        "com.diffblue.demo.ecommerce.repositories.AddressRepository");
    Reflector.setField(objectUnderTest, "addressRepo", addressRepository);
    final Map<String, Object> model = null;
    final HttpSession session = PowerMockito.mock(HttpSession.class);
    final CustomerForm customerForm =
        (CustomerForm)Reflector.getInstance("com.diffblue.demo.ecommerce.forms.CustomerForm");
    Reflector.setField(customerForm, "email", null);
    Reflector.setField(customerForm, "phoneNumber", null);
    Reflector.setField(customerForm, "shippingAddressForm", null);
    Reflector.setField(customerForm, "firstName", null);
    Reflector.setField(customerForm, "lastName", null);
    final Cart cart = (Cart)Reflector.getInstance("com.diffblue.demo.ecommerce.models.Cart");
    Reflector.setField(cart, "shipping", 0.0);
    Reflector.setField(cart, "cartItems", null);
    Reflector.setField(cart, "taxRate", 0.0);
    Reflector.setField(cart, "total", 0.0);
    Reflector.setField(cart, "subtotal", 0.0);
    Reflector.setField(cart, "tax", 0.0);
    final Method getAttributeMethod =
        DTUMemberMatcher.method(HttpSession.class, "getAttribute", String.class);
    ((PowerMockitoStubber)PowerMockito.doReturn(cart)
         .doReturn(customerForm)
         .doReturn(null)
         .doReturn(null))
        .when(session, getAttributeMethod)
        .withArguments(or(isA(String.class), isNull(String.class)));
    final PaymentForm paymentForm = null;

    // Act
    thrown.expect(NullPointerException.class);
    objectUnderTest.viewPaymentPage(model, session, paymentForm);

    // Method is not expected to return due to exception thrown
  }
}
