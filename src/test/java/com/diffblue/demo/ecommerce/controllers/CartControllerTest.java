package com.diffblue.demo.ecommerce.controllers;

import static org.mockito.AdditionalMatchers.or;
import static org.mockito.Matchers.anyInt;
import static org.mockito.Matchers.isA;
import static org.mockito.Matchers.isNull;

import com.diffblue.deeptestutils.Reflector;
import com.diffblue.deeptestutils.mock.DTUMemberMatcher;
import com.diffblue.demo.ecommerce.controllers.CartController;
import com.diffblue.demo.ecommerce.models.Cart;
import com.diffblue.demo.ecommerce.models.Category;
import com.diffblue.demo.ecommerce.models.Product;
import com.diffblue.demo.ecommerce.repositories.ProductRepository;
import org.junit.Assert;
import org.junit.Rule;
import org.junit.Test;
import org.junit.rules.ExpectedException;
import org.junit.rules.Timeout;
import org.junit.runner.RunWith;
import org.powermock.api.mockito.PowerMockito;
import org.powermock.api.mockito.expectation.PowerMockitoStubber;
import org.powermock.core.classloader.annotations.PowerMockIgnore;
import org.powermock.core.classloader.annotations.PrepareForTest;
import org.powermock.modules.junit4.PowerMockRunner;

import java.lang.reflect.Array;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.util.ArrayList;
import java.util.HashMap;
import javax.servlet.http.HttpSession;

@org.junit.runner
    .RunWith(org.powermock.modules.junit4.PowerMockRunner.class)
    @org.powermock.core.classloader.annotations.PowerMockIgnore({"javax.management.*"})
    public class CartControllerTest {

  @Rule public ExpectedException thrown = ExpectedException.none();
  @Rule public Timeout globalTimeout = new Timeout(10000);

  /* testedClasses: CartController */
  /*
   * Test generated by Diffblue Cover.
   * This test case covers:
   *  - conditional line 56 branch to line 57
   */
  @PrepareForTest({CartController.class, HttpSession.class, ProductRepository.class})
  @Test
  public void addToCartInputNotNullNotNullNullOutputNotNull()
      throws Exception, InvocationTargetException {

    // Arrange
    final CartController objectUnderTest = (CartController)Reflector.getInstance(
        "com.diffblue.demo.ecommerce.controllers.CartController");
    final ProductRepository productRepository = PowerMockito.mock(ProductRepository.class);
    final Product product1 = new Product();
    product1.setDescription("");
    product1.setSize("");
    product1.setCategory(null);
    product1.setPhoto("");
    Reflector.setField(product1, "name", null);
    product1.setCollection(null);
    product1.setId(1);
    product1.setSku("");
    product1.setPrice(0.0);
    PowerMockito.when(productRepository.findById(anyInt())).thenReturn(product1);
    Reflector.setField(objectUnderTest, "productRepo", productRepository);
    final Product product = new Product();
    product.setDescription("");
    product.setSize("");
    final Category category = new Category();
    Reflector.setField(category, "products", null);
    category.setId(0);
    Reflector.setField(category, "name", "");
    product.setCategory(category);
    product.setPhoto("");
    Reflector.setField(product, "name", "");
    product.setCollection(null);
    product.setId(0);
    product.setSku("");
    product.setPrice(0.0);
    final HttpSession session = PowerMockito.mock(HttpSession.class);
    final Cart cart1 = new Cart();
    Reflector.setField(cart1, "shipping", 0.0);
    final HashMap<Product, Integer> hashMap1 = new HashMap<Product, Integer>();
    Reflector.setField(cart1, "cartItems", hashMap1);
    Reflector.setField(cart1, "taxRate", 0.0);
    Reflector.setField(cart1, "total", 0.0);
    Reflector.setField(cart1, "subtotal", 0.0);
    Reflector.setField(cart1, "tax", 0.0);
    final Cart cart = new Cart();
    Reflector.setField(cart, "shipping", 0.0);
    final HashMap<Product, Integer> hashMap = new HashMap<Product, Integer>();
    final Product product2 = new Product();
    product2.setDescription(null);
    product2.setSize(null);
    final Category category1 = new Category();
    final ArrayList<Product> arrayList = new ArrayList<Product>();
    arrayList.add(null);
    Reflector.setField(category1, "products", arrayList);
    category1.setId(0);
    Reflector.setField(category1, "name", "");
    product2.setCategory(category1);
    product2.setPhoto(null);
    Reflector.setField(product2, "name", "");
    product2.setCollection(null);
    product2.setId(0);
    product2.setSku(null);
    product2.setPrice(0.0);
    hashMap.put(product2, 0);
    Reflector.setField(cart, "cartItems", hashMap);
    Reflector.setField(cart, "taxRate", 0.0);
    Reflector.setField(cart, "total", 0.0);
    Reflector.setField(cart, "subtotal", 0.0);
    Reflector.setField(cart, "tax", 0.0);
    final Method getAttributeMethod =
        DTUMemberMatcher.method(HttpSession.class, "getAttribute", String.class);
    ((PowerMockitoStubber)PowerMockito.doReturn(cart).doReturn(cart1))
        .when(session, getAttributeMethod)
        .withArguments(or(isA(String.class), isNull(String.class)));
    final String size = null;

    // Act
    final String retval = objectUnderTest.addToCart(product, session, size);

    // Assert result
    Assert.assertEquals("redirect:/cart", retval);
  }

  /*
   * Test generated by Diffblue Cover.
   * This test case covers the entire method.
   */

  @Test
  public void constructorInputNotNullOutputVoid() throws InvocationTargetException {

    // Arrange
    final ProductRepository productRepo = (ProductRepository)Reflector.getInstance(
        "com.diffblue.demo.ecommerce.repositories.ProductRepository");

    // Act, creating object to test constructor
    final CartController objectUnderTest = new CartController(productRepo);

    // Method returns void, testing that no exception is thrown
  }

  /*
   * Test generated by Diffblue Cover.
   * This test case covers:
   *  - conditional line 86 branch to line 90
   */
  @PrepareForTest({CartController.class, HttpSession.class})
  @Test
  public void getOrCreateSessionCartInputNotNullOutputNotNull()
      throws Exception, InvocationTargetException {

    // Arrange
    final CartController objectUnderTest = (CartController)Reflector.getInstance(
        "com.diffblue.demo.ecommerce.controllers.CartController");
    Reflector.setField(objectUnderTest, "productRepo", null);
    final HttpSession session = PowerMockito.mock(HttpSession.class);
    final Cart cart = new Cart();
    Reflector.setField(cart, "shipping", 0.0);
    Reflector.setField(cart, "cartItems", null);
    Reflector.setField(cart, "taxRate", 0.0);
    Reflector.setField(cart, "total", 0.0);
    Reflector.setField(cart, "subtotal", 0.0);
    Reflector.setField(cart, "tax", 0.0);
    final Method getAttributeMethod =
        DTUMemberMatcher.method(HttpSession.class, "getAttribute", String.class);
    ((PowerMockitoStubber)PowerMockito.doReturn(0).doReturn(cart))
        .when(session, getAttributeMethod)
        .withArguments(or(isA(String.class), isNull(String.class)));

    // Act
    final Cart retval = objectUnderTest.getOrCreateSessionCart(session);

    // Assert result
    Assert.assertNotNull(retval);
    Assert.assertEquals(0.0, retval.getShipping(), 0.0);
    Assert.assertNull(Reflector.getInstanceField(retval, "cartItems"));
    Assert.assertEquals(0.0, (double)Reflector.getInstanceField(retval, "taxRate"), 0.0);
    Assert.assertEquals(0.0, (double)Reflector.getInstanceField(retval, "total"), 0.0);
    Assert.assertEquals(0.0, retval.getSubtotal(), 0.0);
    Assert.assertEquals(0.0, retval.getTax(), 0.0);
  }

  /*
   * Test generated by Diffblue Cover.
   * This test case covers:
   *  - conditional line 86 branch to line 87
   */
  @PrepareForTest({CartController.class, HttpSession.class})
  @Test
  public void getOrCreateSessionCartInputNotNullOutputNotNull2()
      throws Exception, InvocationTargetException {

    // Arrange
    final CartController objectUnderTest = (CartController)Reflector.getInstance(
        "com.diffblue.demo.ecommerce.controllers.CartController");
    Reflector.setField(objectUnderTest, "productRepo", null);
    final HttpSession session = PowerMockito.mock(HttpSession.class);
    final Method getAttributeMethod =
        DTUMemberMatcher.method(HttpSession.class, "getAttribute", String.class);
    PowerMockito.doReturn(null)
        .when(session, getAttributeMethod)
        .withArguments(or(isA(String.class), isNull(String.class)));

    // Act
    final Cart retval = objectUnderTest.getOrCreateSessionCart(session);

    // Assert result
    Assert.assertNotNull(retval);
    Assert.assertEquals(4.5, retval.getShipping(), 0.0);
    final HashMap<Product, Integer> hashMap = new HashMap<Product, Integer>();
    Assert.assertEquals(hashMap, Reflector.getInstanceField(retval, "cartItems"));
    Assert.assertEquals(0.2, (double)Reflector.getInstanceField(retval, "taxRate"), 0.0);
    Assert.assertEquals(0.0, (double)Reflector.getInstanceField(retval, "total"), 0.0);
    Assert.assertEquals(0.0, retval.getSubtotal(), 0.0);
    Assert.assertEquals(0.0, retval.getTax(), 0.0);
  }

  /*
   * Test generated by Diffblue Cover.
   * This test case covers:
   *  - conditional line 72 branch to line 73
   *  - conditional line 73 branch to line 73
   */
  @PrepareForTest({CartController.class, HttpSession.class})
  @Test
  public void getSessionCartInputNotNullOutputNotNull()
      throws Exception, InvocationTargetException {

    // Arrange
    final CartController objectUnderTest = (CartController)Reflector.getInstance(
        "com.diffblue.demo.ecommerce.controllers.CartController");
    final ProductRepository productRepository = (ProductRepository)Reflector.getInstance(
        "com.diffblue.demo.ecommerce.repositories.ProductRepository");
    Reflector.setField(objectUnderTest, "productRepo", productRepository);
    final HttpSession session = PowerMockito.mock(HttpSession.class);
    final Cart cart = (Cart)Reflector.getInstance("com.diffblue.demo.ecommerce.models.Cart");
    Reflector.setField(cart, "shipping", 0.0);
    Reflector.setField(cart, "cartItems", null);
    Reflector.setField(cart, "taxRate", 0.0);
    Reflector.setField(cart, "total", 0.0);
    Reflector.setField(cart, "subtotal", 0.0);
    Reflector.setField(cart, "tax", 0.0);
    final Method getAttributeMethod =
        DTUMemberMatcher.method(HttpSession.class, "getAttribute", String.class);
    ((PowerMockitoStubber)PowerMockito.doReturn(0).doReturn(cart))
        .when(session, getAttributeMethod)
        .withArguments(or(isA(String.class), isNull(String.class)));

    // Act
    final Cart retval = objectUnderTest.getSessionCart(session);

    // Assert result
    Assert.assertNotNull(retval);
    Assert.assertEquals(0.0, retval.getShipping(), 0.0);
    Assert.assertNull(Reflector.getInstanceField(retval, "cartItems"));
    Assert.assertEquals(0.0, (double)Reflector.getInstanceField(retval, "taxRate"), 0.0);
    Assert.assertEquals(0.0, (double)Reflector.getInstanceField(retval, "total"), 0.0);
    Assert.assertEquals(0.0, retval.getSubtotal(), 0.0);
    Assert.assertEquals(0.0, retval.getTax(), 0.0);
  }

  /*
   * Test generated by Diffblue Cover.
   * This test case covers:
   *  - conditional line 72 branch to line 75
   */
  @PrepareForTest({CartController.class, HttpSession.class})
  @Test
  public void getSessionCartInputNotNullOutputNull() throws Exception, InvocationTargetException {

    // Arrange
    final CartController objectUnderTest = (CartController)Reflector.getInstance(
        "com.diffblue.demo.ecommerce.controllers.CartController");
    Reflector.setField(objectUnderTest, "productRepo", null);
    final HttpSession session = PowerMockito.mock(HttpSession.class);
    final Method getAttributeMethod =
        DTUMemberMatcher.method(HttpSession.class, "getAttribute", String.class);
    PowerMockito.doReturn(null)
        .when(session, getAttributeMethod)
        .withArguments(or(isA(String.class), isNull(String.class)));

    // Act
    final Cart retval = objectUnderTest.getSessionCart(session);

    // Assert result
    Assert.assertNull(retval);
  }

  /*
   * Test generated by Diffblue Cover.
   * This test case covers:
   *  - conditional line 41 branch to line 41
   */
  @PrepareForTest({CartController.class, HttpSession.class})
  @Test
  public void viewCartInput0NotNullOutputNotNull() throws Exception, InvocationTargetException {

    // Arrange
    final CartController objectUnderTest = (CartController)Reflector.getInstance(
        "com.diffblue.demo.ecommerce.controllers.CartController");
    Reflector.setField(objectUnderTest, "productRepo", null);
    final HashMap<String, Object> model = new HashMap<String, Object>();
    final HttpSession session = PowerMockito.mock(HttpSession.class);
    final Method getAttributeMethod =
        DTUMemberMatcher.method(HttpSession.class, "getAttribute", String.class);
    PowerMockito.doReturn(null)
        .when(session, getAttributeMethod)
        .withArguments(or(isA(String.class), isNull(String.class)));

    // Act
    final String retval = objectUnderTest.viewCart(model, session);

    // Assert result
    Assert.assertEquals("Cart", retval);
  }
}
