package com.diffblue.demo.ecommerce.controllers;

import com.diffblue.deeptestutils.Reflector;
import com.diffblue.demo.ecommerce.models.Cart;
import com.diffblue.demo.ecommerce.models.Product;
import com.diffblue.demo.ecommerce.repositories.ProductRepository;
import org.junit.Assert;
import org.junit.Rule;
import org.junit.Test;
import org.junit.rules.ExpectedException;
import org.springframework.mock.web.MockHttpSession;

import java.util.ArrayList;
import javax.servlet.http.HttpSession;


public class CartControllerTest {

  @Rule
  public ExpectedException thrown = ExpectedException.none();

  /* testedClasses: com/diffblue/demo/ecommerce/controllers/CartController.java */
  /*
   * Test generated by Diffblue Deeptest.
   * Positive test case - check that changing quantity to 5 works
   */

  @Test
  public void updateCartPositive() throws Throwable {

    // Setup mocks
    Product product = ((Product)Reflector.getInstance("com.diffblue.demo.ecommerce.models.Product"));
    Reflector.setField(product, "price", 1.0);
    Reflector.setField(product, "sku", null);
    Reflector.setField(product, "id", 0);
    Reflector.setField(product, "collection", null);
    Reflector.setField(product, "name", null);
    Reflector.setField(product, "photo", null);
    Reflector.setField(product, "category", null);
    Reflector.setField(product, "size", "Adult");
    Reflector.setField(product, "description", null);
    ArrayList productRepositorys = new ArrayList();

    // Arrange
    CartController objectUnderTest = ((CartController)Reflector.getInstance("com.diffblue.demo.ecommerce.controllers.CartController"));
    ProductRepository productRepository = ((ProductRepository)org.mockito.Mockito.mock(ProductRepository.class));
    Reflector.setField(objectUnderTest, "productRepo", productRepository);
    productRepositorys.add(productRepository);
    int productId = 0;
    int quantity = 5;
    HttpSession session =  new MockHttpSession();
    Cart cart = new Cart();
    cart.addProduct(product);
    session.setAttribute("shoppingCart", cart);
    String size = "Adult";
    org.mockito.Mockito.when(((com.diffblue.demo.ecommerce.repositories.ProductRepository)productRepository).findById(org.mockito.Matchers.anyInt()))
      .thenReturn(product);

    // Act
    String retval = objectUnderTest.updateCart(productId, quantity, session, size);

    // Assert result
    Assert.assertEquals("redirect:/cart", retval);
    Assert.assertEquals(10.5, objectUnderTest.getOrCreateSessionCart(session).getTotal(), 0.0);

  }

  /*
   * Test generated by Diffblue Deeptest.
   * Negative Test - Quantity <0 doesn't make sense.
   * NOTE: Quantity 0 will cause the item to be removed from the cart.
   */

  @Test
  public void updateCartNegative() throws Throwable {

    // Setup mocks
    Product product = ((Product)Reflector.getInstance("com.diffblue.demo.ecommerce.models.Product"));
    Reflector.setField(product, "price", 0.0);
    Reflector.setField(product, "sku", null);
    Reflector.setField(product, "id", 0);
    Reflector.setField(product, "collection", null);
    Reflector.setField(product, "name", null);
    Reflector.setField(product, "photo", null);
    Reflector.setField(product, "category", null);
    Reflector.setField(product, "size", null);
    Reflector.setField(product, "description", null);
    ArrayList productRepositorys = new ArrayList();

    // Arrange
    CartController objectUnderTest = ((CartController)Reflector.getInstance("com.diffblue.demo.ecommerce.controllers.CartController"));
    ProductRepository productRepository = ((ProductRepository)org.mockito.Mockito.mock(ProductRepository.class));
    Reflector.setField(objectUnderTest, "productRepo", productRepository);
    productRepositorys.add(productRepository);
    int productId = 0;
    int quantity = -1;
    HttpSession session = ((HttpSession)Reflector.getInstance("javax.servlet.http.HttpSession"));
    String size = "";
    org.mockito.Mockito.when(((com.diffblue.demo.ecommerce.repositories.ProductRepository)productRepository).findById(org.mockito.Matchers.anyInt()))
        .thenReturn(product);

    // Act
    thrown.expect(IllegalArgumentException.class);
    String retval = objectUnderTest.updateCart(productId, quantity, session, size);

    // Assert result
    Assert.fail("Must not get here as exception is thrown");

  }
}
