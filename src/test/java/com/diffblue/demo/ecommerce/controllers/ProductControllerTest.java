package com.diffblue.demo.ecommerce.controllers;

import static org.mockito.AdditionalMatchers.or;
import static org.mockito.Matchers.anyInt;
import static org.mockito.Matchers.isA;
import static org.mockito.Matchers.isNull;

import com.diffblue.deeptestutils.Reflector;
import com.diffblue.deeptestutils.mock.DTUMemberMatcher;
import com.diffblue.demo.ecommerce.InvalidCategoryException;
import com.diffblue.demo.ecommerce.controllers.ProductController;
import com.diffblue.demo.ecommerce.models.Category;
import com.diffblue.demo.ecommerce.models.Collection;
import com.diffblue.demo.ecommerce.models.Product;
import com.diffblue.demo.ecommerce.repositories.CategoryRepository;
import com.diffblue.demo.ecommerce.repositories.ProductRepository;
import org.junit.Assert;
import org.junit.Rule;
import org.junit.Test;
import org.junit.rules.ExpectedException;
import org.junit.rules.Timeout;
import org.junit.runner.RunWith;
import org.powermock.api.mockito.PowerMockito;
import org.powermock.core.classloader.annotations.PowerMockIgnore;
import org.powermock.core.classloader.annotations.PrepareForTest;
import org.powermock.modules.junit4.PowerMockRunner;

import java.lang.reflect.Array;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;

@org.junit.runner
    .RunWith(org.powermock.modules.junit4.PowerMockRunner.class)
    @org.powermock.core.classloader.annotations.PowerMockIgnore({"javax.management.*"})
    public class ProductControllerTest {

  @Rule public ExpectedException thrown = ExpectedException.none();
  @Rule public Timeout globalTimeout = new Timeout(10000);

  /* testedClasses: ProductController */
  /*
   * Test generated by Diffblue Cover.
   * This test case covers the entire method.
   */

  @Test
  public void constructorInputNotNullNotNullOutputVoid() throws InvocationTargetException {

    // Arrange
    final CategoryRepository categoryRepo2 = (CategoryRepository)Reflector.getInstance(
        "com.diffblue.demo.ecommerce.repositories.CategoryRepository");
    final ProductRepository productRepo2 = (ProductRepository)Reflector.getInstance(
        "com.diffblue.demo.ecommerce.repositories.ProductRepository");

    // Act, creating object to test constructor
    final ProductController objectUnderTest = new ProductController(categoryRepo2, productRepo2);

    // Method returns void, testing that no exception is thrown
  }

  /*
   * Test generated by Diffblue Cover.
   * This test case covers:
   *  - conditional line 45 branch to line 45
   *  - conditional line 46 branch to line 46
   */
  @PrepareForTest({ProductRepository.class})
  @Test
  public void productListInput0OutputNotNull() throws Exception, InvocationTargetException {

    // Arrange
    final ProductController objectUnderTest = (ProductController)Reflector.getInstance(
        "com.diffblue.demo.ecommerce.controllers.ProductController");
    final ProductRepository productRepository = PowerMockito.mock(ProductRepository.class);
    final ArrayList arrayList = new ArrayList();
    arrayList.add(0);
    PowerMockito.when(productRepository.findAll()).thenReturn(arrayList);
    Reflector.setField(objectUnderTest, "productRepo", productRepository);
    Reflector.setField(objectUnderTest, "categoryRepo", null);
    final HashMap<String, Object> model = new HashMap<String, Object>();

    // Act
    final String retval = objectUnderTest.productList(model);

    // Assert result
    Assert.assertEquals("ProductList", retval);
  }

  /*
   * Test generated by Diffblue Cover.
   * This test case covers:
   *  - conditional line 61 branch to line 62
   *  - conditional line 63 branch to line 63
   */
  @PrepareForTest({ProductRepository.class, CategoryRepository.class})
  @Test
  public void productListInputNotNull0OutputNotNull() throws Exception, InvocationTargetException {

    // Arrange
    final ProductController objectUnderTest = (ProductController)Reflector.getInstance(
        "com.diffblue.demo.ecommerce.controllers.ProductController");
    final ProductRepository productRepository = PowerMockito.mock(ProductRepository.class);
    final ArrayList arrayList = new ArrayList();
    final Product product =
        (Product)Reflector.getInstance("com.diffblue.demo.ecommerce.models.Product");
    Reflector.setField(product, "description", "");
    Reflector.setField(product, "size", "");
    final Category category1 =
        (Category)Reflector.getInstance("com.diffblue.demo.ecommerce.models.Category");
    final ArrayList<Product> arrayList1 = new ArrayList<Product>();
    arrayList1.add(null);
    Reflector.setField(category1, "products", arrayList1);
    Reflector.setField(category1, "id", 0);
    Reflector.setField(category1, "name", "");
    Reflector.setField(product, "category", category1);
    Reflector.setField(product, "photo", "");
    Reflector.setField(product, "name", "");
    final Collection collection =
        (Collection)Reflector.getInstance("com.diffblue.demo.ecommerce.models.Collection");
    final ArrayList<Product> arrayList2 = new ArrayList<Product>();
    arrayList2.add(null);
    Reflector.setField(collection, "products", arrayList2);
    Reflector.setField(collection, "id", 0);
    Reflector.setField(collection, "name", "");
    Reflector.setField(product, "collection", collection);
    Reflector.setField(product, "id", 0);
    Reflector.setField(product, "sku", "");
    Reflector.setField(product, "price", 0.0);
    arrayList.add(product);
    PowerMockito
        .when(productRepository.findByCategory(or(isA(Category.class), isNull(Category.class))))
        .thenReturn(arrayList);
    Reflector.setField(objectUnderTest, "productRepo", productRepository);
    final CategoryRepository categoryRepository = PowerMockito.mock(CategoryRepository.class);
    final Category category2 =
        (Category)Reflector.getInstance("com.diffblue.demo.ecommerce.models.Category");
    final ArrayList<Product> arrayList3 = new ArrayList<Product>();
    final Product product1 =
        (Product)Reflector.getInstance("com.diffblue.demo.ecommerce.models.Product");
    Reflector.setField(product1, "description", "");
    Reflector.setField(product1, "size", "");
    final Category category3 =
        (Category)Reflector.getInstance("com.diffblue.demo.ecommerce.models.Category");
    Reflector.setField(category3, "products", null);
    Reflector.setField(category3, "id", 0);
    Reflector.setField(category3, "name", "");
    Reflector.setField(product1, "category", category3);
    Reflector.setField(product1, "photo", "");
    Reflector.setField(product1, "name", "");
    final Collection collection1 =
        (Collection)Reflector.getInstance("com.diffblue.demo.ecommerce.models.Collection");
    Reflector.setField(collection1, "products", null);
    Reflector.setField(collection1, "id", 0);
    Reflector.setField(collection1, "name", "");
    Reflector.setField(product1, "collection", collection1);
    Reflector.setField(product1, "id", 0);
    Reflector.setField(product1, "sku", "");
    Reflector.setField(product1, "price", 0.0);
    arrayList3.add(product1);
    Reflector.setField(category2, "products", arrayList3);
    Reflector.setField(category2, "id", 0);
    Reflector.setField(category2, "name", "");
    PowerMockito.when(categoryRepository.findByName(or(isA(String.class), isNull(String.class))))
        .thenReturn(category2);
    Reflector.setField(objectUnderTest, "categoryRepo", categoryRepository);
    final String category = "";
    final HashMap<String, Object> model = new HashMap<String, Object>();

    // Act
    final String retval = objectUnderTest.productList(category, model);

    // Assert result
    Assert.assertEquals("ProductList", retval);
  }

  /*
   * Test generated by Diffblue Cover.
   * This test case covers:
   *  - conditional line 61 branch to line 66
   *  - conditional line 66 branch to line 68
   *  - conditional line 69 branch to line 69
   */
  @PrepareForTest({InvalidCategoryException.class, ProductController.class,
                   CategoryRepository.class})
  @Test
  public void
  productListInputNotNull1OutputNotNull() throws Exception, InvocationTargetException {

    // Arrange
    final ProductController objectUnderTest = (ProductController)Reflector.getInstance(
        "com.diffblue.demo.ecommerce.controllers.ProductController");
    Reflector.setField(objectUnderTest, "productRepo", null);
    final CategoryRepository categoryRepository = PowerMockito.mock(CategoryRepository.class);
    PowerMockito.when(categoryRepository.findByName(or(isA(String.class), isNull(String.class))))
        .thenReturn(null);
    Reflector.setField(objectUnderTest, "categoryRepo", categoryRepository);
    final String category = "";
    final HashMap<String, Object> model = new HashMap<String, Object>();
    model.put("", null);
    final InvalidCategoryException invalidCategoryException =
        PowerMockito.mock(InvalidCategoryException.class);
    final Method getMessageMethod =
        DTUMemberMatcher.method(InvalidCategoryException.class, "getMessage");
    PowerMockito.doReturn(null).when(invalidCategoryException, getMessageMethod).withNoArguments();
    PowerMockito.whenNew(InvalidCategoryException.class)
        .withParameterTypes(int.class, String.class)
        .withArguments(anyInt(), or(isA(String.class), isNull(String.class)))
        .thenReturn(invalidCategoryException);

    // Act
    final String retval = objectUnderTest.productList(category, model);

    // Assert result
    Assert.assertEquals("redirect:/exception", retval);
  }

  /*
   * Test generated by Diffblue Cover.
   * This test case covers:
   *  - conditional line 82 branch to line 83
   *  - conditional line 83 branch to line 83
   *  - conditional line 84 branch to line 84
   */
  @PrepareForTest({ProductRepository.class})
  @Test
  public void productPageInputPositive0OutputNotNull() throws Exception, InvocationTargetException {

    // Arrange
    final ProductController objectUnderTest = (ProductController)Reflector.getInstance(
        "com.diffblue.demo.ecommerce.controllers.ProductController");
    final ProductRepository productRepository = PowerMockito.mock(ProductRepository.class);
    final Product product =
        (Product)Reflector.getInstance("com.diffblue.demo.ecommerce.models.Product");
    Reflector.setField(product, "description", null);
    Reflector.setField(product, "size", null);
    Reflector.setField(product, "category", null);
    Reflector.setField(product, "photo", "");
    Reflector.setField(product, "name", null);
    final Collection collection =
        (Collection)Reflector.getInstance("com.diffblue.demo.ecommerce.models.Collection");
    final ArrayList<Product> arrayList = new ArrayList<Product>();
    final Product product1 =
        (Product)Reflector.getInstance("com.diffblue.demo.ecommerce.models.Product");
    Reflector.setField(product1, "description", "");
    Reflector.setField(product1, "size", null);
    final Category category =
        (Category)Reflector.getInstance("com.diffblue.demo.ecommerce.models.Category");
    Reflector.setField(category, "products", null);
    Reflector.setField(category, "id", 0);
    Reflector.setField(category, "name", null);
    Reflector.setField(product1, "category", category);
    Reflector.setField(product1, "photo", null);
    Reflector.setField(product1, "name", null);
    Reflector.setField(product1, "collection", null);
    Reflector.setField(product1, "id", 0);
    Reflector.setField(product1, "sku", null);
    Reflector.setField(product1, "price", 0.0);
    arrayList.add(product1);
    Reflector.setField(collection, "products", arrayList);
    Reflector.setField(collection, "id", 0);
    Reflector.setField(collection, "name", "");
    Reflector.setField(product, "collection", collection);
    Reflector.setField(product, "id", 0);
    Reflector.setField(product, "sku", null);
    Reflector.setField(product, "price", 0.0);
    PowerMockito.when(productRepository.findById(anyInt())).thenReturn(product);
    Reflector.setField(objectUnderTest, "productRepo", productRepository);
    final CategoryRepository categoryRepository = (CategoryRepository)Reflector.getInstance(
        "com.diffblue.demo.ecommerce.repositories.CategoryRepository");
    Reflector.setField(objectUnderTest, "categoryRepo", categoryRepository);
    final int id = 1;
    final HashMap<String, Object> model = new HashMap<String, Object>();

    // Act
    final String retval = objectUnderTest.productPage(id, model);

    // Assert result
    Assert.assertEquals("ProductPage", retval);
  }

  /*
   * Test generated by Diffblue Cover.
   * This test case covers:
   *  - conditional line 82 branch to line 87
   *  - conditional line 87 branch to line 87
   */
  @PrepareForTest({ProductRepository.class})
  @Test
  public void productPageInputPositiveNullOutputNotNull()
      throws Exception, InvocationTargetException {

    // Arrange
    final ProductController objectUnderTest = (ProductController)Reflector.getInstance(
        "com.diffblue.demo.ecommerce.controllers.ProductController");
    final ProductRepository productRepository = PowerMockito.mock(ProductRepository.class);
    PowerMockito.when(productRepository.findById(anyInt())).thenReturn(null);
    Reflector.setField(objectUnderTest, "productRepo", productRepository);
    final CategoryRepository categoryRepository = (CategoryRepository)Reflector.getInstance(
        "com.diffblue.demo.ecommerce.repositories.CategoryRepository");
    Reflector.setField(objectUnderTest, "categoryRepo", categoryRepository);
    final int id = 1;
    final Map<String, Object> model = null;

    // Act
    final String retval = objectUnderTest.productPage(id, model);

    // Assert result
    Assert.assertEquals("redirect:/ProductList", retval);
  }
}
