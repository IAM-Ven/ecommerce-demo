package com.diffblue.demo.ecommerce.controllers;

import static org.mockito.AdditionalMatchers.or;
import static org.mockito.Matchers.anyBoolean;
import static org.mockito.Matchers.isA;
import static org.mockito.Matchers.isNull;

import com.diffblue.deeptestutils.Reflector;
import com.diffblue.deeptestutils.mock.DTUMemberMatcher;
import com.diffblue.demo.ecommerce.controllers.CustomisedErrorController;
import org.junit.Assert;
import org.junit.Rule;
import org.junit.Test;
import org.junit.rules.ExpectedException;
import org.junit.rules.Timeout;
import org.junit.runner.RunWith;
import org.powermock.api.mockito.PowerMockito;
import org.powermock.api.mockito.expectation.PowerMockitoStubber;
import org.powermock.core.classloader.annotations.PowerMockIgnore;
import org.powermock.core.classloader.annotations.PrepareForTest;
import org.powermock.modules.junit4.PowerMockRunner;
import org.springframework.boot.autoconfigure.web.ErrorAttributes;
import org.springframework.ui.Model;
import org.springframework.web.context.request.RequestAttributes;
import org.springframework.web.context.request.ServletRequestAttributes;

import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.util.HashMap;
import java.util.Map;
import javax.servlet.http.HttpServletRequest;

@org.junit.runner
    .RunWith(org.powermock.modules.junit4.PowerMockRunner.class)
    @org.powermock.core.classloader.annotations.PowerMockIgnore({"javax.management.*"})
    public class CustomisedErrorControllerTest {

  @Rule public ExpectedException thrown = ExpectedException.none();
  @Rule public Timeout globalTimeout = new Timeout(10000);

  /* testedClasses: CustomisedErrorController */
  /*
   * Test generated by Diffblue Cover.
   * This test case covers the entire method.
   */

  @Test
  public void constructorInputNotNullOutputVoid() throws InvocationTargetException {

    // Arrange
    final ErrorAttributes attributes = (ErrorAttributes)Reflector.getInstance(
        "org.springframework.boot.autoconfigure.web.ErrorAttributes");

    // Act, creating object to test constructor
    final CustomisedErrorController objectUnderTest = new CustomisedErrorController(attributes);

    // Method returns void, testing that no exception is thrown
  }

  /*
   * Test generated by Diffblue Cover.
   * This test case covers:
   *  - conditional line 38 branch to line 38
   *  - conditional line 39 branch to line 39
   *  - conditional line 40 branch to line 40
   *  - conditional line 41 branch to line 41
   *  - conditional line 42 branch to line 42
   */
  @PrepareForTest({ErrorAttributes.class, CustomisedErrorController.class, Model.class})
  @Test
  public void customErrorInputNotNullNotNullOutputNotNull()
      throws Exception, InvocationTargetException {

    // Arrange
    final CustomisedErrorController objectUnderTest =
        (CustomisedErrorController)Reflector.getInstance(
            "com.diffblue.demo.ecommerce.controllers.CustomisedErrorController");
    final ErrorAttributes errorAttributes = PowerMockito.mock(ErrorAttributes.class);
    final HashMap hashMap = new HashMap();
    final Method getErrorAttributesMethod = DTUMemberMatcher.method(
        ErrorAttributes.class, "getErrorAttributes", RequestAttributes.class, boolean.class);
    PowerMockito.doReturn(hashMap)
        .when(errorAttributes, getErrorAttributesMethod)
        .withArguments(or(isA(RequestAttributes.class), isNull(RequestAttributes.class)),
                       anyBoolean());
    Reflector.setField(objectUnderTest, "attributes", errorAttributes);
    final Model model = PowerMockito.mock(Model.class);
    final Model model5 = PowerMockito.mock(Model.class);
    final Model model4 = PowerMockito.mock(Model.class);
    final Model model3 = PowerMockito.mock(Model.class);
    final Model model2 = PowerMockito.mock(Model.class);
    final Model model1 = PowerMockito.mock(Model.class);
    final Method addAttributeMethod =
        DTUMemberMatcher.method(Model.class, "addAttribute", String.class, Object.class);
    ((PowerMockitoStubber)PowerMockito.doReturn(model1)
         .doReturn(model2)
         .doReturn(model3)
         .doReturn(model4)
         .doReturn(model5))
        .when(model, addAttributeMethod)
        .withArguments(or(isA(String.class), isNull(String.class)),
                       or(isA(Object.class), isNull(Object.class)));
    final HttpServletRequest request =
        (HttpServletRequest)Reflector.getInstance("javax.servlet.http.HttpServletRequest");
    final ServletRequestAttributes servletRequestAttributes =
        PowerMockito.mock(ServletRequestAttributes.class);
    PowerMockito.whenNew(ServletRequestAttributes.class)
        .withParameterTypes(HttpServletRequest.class)
        .withArguments(or(isA(HttpServletRequest.class), isNull(HttpServletRequest.class)))
        .thenReturn(servletRequestAttributes);

    // Act
    final String retval = objectUnderTest.customError(model, request);

    // Assert result
    Assert.assertEquals("CustomisedError", retval);
  }

  /*
   * Test generated by Diffblue Cover.
   * This test case covers the entire method.
   */

  @Test
  public void customExceptionInputNotNullNotNullOutputNotNull() throws InvocationTargetException {

    // Arrange
    final CustomisedErrorController objectUnderTest =
        (CustomisedErrorController)Reflector.getInstance(
            "com.diffblue.demo.ecommerce.controllers.CustomisedErrorController");
    Reflector.setField(objectUnderTest, "attributes", null);
    final Model model = (Model)Reflector.getInstance("org.springframework.ui.Model");
    final HttpServletRequest request =
        (HttpServletRequest)Reflector.getInstance("javax.servlet.http.HttpServletRequest");

    // Act
    final String retval = objectUnderTest.customException(model, request);

    // Assert result
    Assert.assertEquals("CustomisedException", retval);
  }

  /*
   * Test generated by Diffblue Cover.
   * This test case covers the entire method.
   */

  @Test
  public void getErrorPathOutputNotNull() throws InvocationTargetException {

    // Arrange
    final CustomisedErrorController objectUnderTest =
        (CustomisedErrorController)Reflector.getInstance(
            "com.diffblue.demo.ecommerce.controllers.CustomisedErrorController");
    Reflector.setField(objectUnderTest, "attributes", null);

    // Act
    final String retval = objectUnderTest.getErrorPath();

    // Assert result
    Assert.assertEquals("/error", retval);
  }

  /*
   * Test generated by Diffblue Cover.
   * This test case covers the entire method.
   */
  @PrepareForTest({ErrorAttributes.class, CustomisedErrorController.class})
  @Test
  public void retriveErrorAttributesInputFalseNullOutputNull()
      throws Exception, InvocationTargetException, IllegalAccessException, NoSuchMethodException {

    // Arrange
    final CustomisedErrorController objectUnderTest =
        (CustomisedErrorController)Reflector.getInstance(
            "com.diffblue.demo.ecommerce.controllers.CustomisedErrorController");
    final ErrorAttributes errorAttributes = PowerMockito.mock(ErrorAttributes.class);
    final Method getErrorAttributesMethod = DTUMemberMatcher.method(
        ErrorAttributes.class, "getErrorAttributes", RequestAttributes.class, boolean.class);
    PowerMockito.doReturn(null)
        .when(errorAttributes, getErrorAttributesMethod)
        .withArguments(or(isA(RequestAttributes.class), isNull(RequestAttributes.class)),
                       anyBoolean());
    Reflector.setField(objectUnderTest, "attributes", errorAttributes);
    final boolean includeStackTrace = false;
    final HttpServletRequest httpServletRequest = null;
    final ServletRequestAttributes servletRequestAttributes =
        PowerMockito.mock(ServletRequestAttributes.class);
    PowerMockito.whenNew(ServletRequestAttributes.class)
        .withParameterTypes(HttpServletRequest.class)
        .withArguments(or(isA(HttpServletRequest.class), isNull(HttpServletRequest.class)))
        .thenReturn(servletRequestAttributes);

    // Act
    final Class<?> classUnderTest =
        Reflector.forName("com.diffblue.demo.ecommerce.controllers.CustomisedErrorController");
    final Method methodUnderTest = classUnderTest.getDeclaredMethod(
        "retriveErrorAttributes", Reflector.forName("boolean"),
        Reflector.forName("javax.servlet.http.HttpServletRequest"));
    methodUnderTest.setAccessible(true);
    final Map<String, Object> retval = (Map<String, Object>)methodUnderTest.invoke(
        objectUnderTest, includeStackTrace, httpServletRequest);

    // Assert result
    Assert.assertNull(retval);
  }
}
