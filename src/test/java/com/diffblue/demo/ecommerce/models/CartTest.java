package com.diffblue.demo.ecommerce.models;

import com.diffblue.deeptestutils.Reflector;
import com.diffblue.demo.ecommerce.models.Cart;
import com.diffblue.demo.ecommerce.models.Category;
import com.diffblue.demo.ecommerce.models.Collection;
import com.diffblue.demo.ecommerce.models.Product;
import org.junit.Assert;
import org.junit.Rule;
import org.junit.Test;
import org.junit.rules.ExpectedException;
import org.junit.rules.Timeout;

import java.lang.reflect.Array;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;

public class CartTest {

  @Rule public ExpectedException thrown = ExpectedException.none();
  @Rule public Timeout globalTimeout = new Timeout(10000);

  /* testedClasses: Cart */
  /*
   * Test generated by Diffblue Cover.
   * This test case covers:
   *  - conditional line 35 branch to line 35
   *  - conditional line 35 branch to line 38
   *  - conditional line 38 branch to line 38
   */

  @Test
  public void addProductInputNotNullOutputVoid() throws InvocationTargetException {

    // Arrange
    final Cart objectUnderTest = new Cart();
    Reflector.setField(objectUnderTest, "shipping", 0.0);
    final HashMap<Product, Integer> hashMap = new HashMap<Product, Integer>();
    Reflector.setField(objectUnderTest, "cartItems", hashMap);
    Reflector.setField(objectUnderTest, "taxRate", -0x1.fffffffffffffp+1 /* -4.0 */);
    Reflector.setField(objectUnderTest, "total", 0.0);
    objectUnderTest.setSubtotal(-0x0.4p-1022 /* -5.56268e-309 */);
    objectUnderTest.setTax(0x1p-1019 /* 1.78006e-307 */);
    final Product product = new Product();
    product.setDescription(null);
    product.setSize(null);
    final Category category = new Category();
    Reflector.setField(category, "products", null);
    category.setId(1);
    Reflector.setField(category, "name", "");
    product.setCategory(category);
    product.setPhoto(null);
    Reflector.setField(product, "name", null);
    product.setCollection(null);
    product.setId(0);
    product.setSku(null);
    product.setPrice(0x0.4p-1022 /* 5.56268e-309 */);

    // Act
    objectUnderTest.addProduct(product);

    // Method returns void, testing that no exception is thrown
  }

  /*
   * Test generated by Diffblue Cover.
   * This test case covers:
   *  - conditional line 35 branch to line 35
   *  - conditional line 35 branch to line 36
   *  - conditional line 36 branch to line 36
   */

  @Test
  public void addProductInputNotNullOutputVoid2() throws InvocationTargetException {

    // Arrange
    final Cart objectUnderTest = new Cart();
    Reflector.setField(objectUnderTest, "shipping", 0.0);
    final HashMap<Product, Integer> hashMap = new HashMap<Product, Integer>();
    final Product product1 = new Product();
    product1.setDescription(null);
    product1.setSize("Child111111111111111111111111111");
    final Category category = new Category();
    final ArrayList<Product> arrayList = new ArrayList<Product>();
    arrayList.add(null);
    Reflector.setField(category, "products", arrayList);
    category.setId(-1_250_952_196);
    Reflector.setField(category, "name", null);
    product1.setCategory(category);
    product1.setPhoto(null);
    Reflector.setField(product1, "name", null);
    final Collection collection = new Collection();
    final ArrayList<Product> arrayList1 = new ArrayList<Product>();
    arrayList1.add(null);
    Reflector.setField(collection, "products", arrayList1);
    collection.setId(-553_795_602);
    Reflector.setField(collection, "name", null);
    product1.setCollection(collection);
    product1.setId(0);
    product1.setSku(null);
    product1.setPrice(0.0);
    hashMap.put(product1, 15);
    Reflector.setField(objectUnderTest, "cartItems", hashMap);
    Reflector.setField(objectUnderTest, "taxRate", 0x1.fffffffffffffp+125 /* 8.50706e+37 */);
    Reflector.setField(objectUnderTest, "total", 0.0);
    objectUnderTest.setSubtotal(0x0.4p-1022 /* 5.56268e-309 */);
    objectUnderTest.setTax(0x1.e7ffffffffffep-990 /* 1.82173e-298 */);
    final Product product = new Product();
    product.setDescription(null);
    product.setSize("Child111111111111111111111111111");
    final Category category1 = new Category();
    category1.setId(-1_250_952_196);
    product.setCategory(category1);
    product.setPhoto(null);
    Reflector.setField(product, "name", null);
    final Collection collection1 = new Collection();
    collection1.setId(-553_795_602);
    product.setCollection(collection1);
    product.setId(0);
    product.setSku(null);
    product.setPrice(-0.0);

    // Act
    objectUnderTest.addProduct(product);

    // Method returns void, testing that no exception is thrown
  }

  /*
   * Test generated by Diffblue Cover.
   * This test case covers:
   *  - conditional line 116 branch to line 116
   *  - conditional line 116 branch to line 121
   */

  @Test
  public void checkInvalidOutputNull() throws InvocationTargetException {

    // Arrange
    final Cart objectUnderTest = new Cart();
    Reflector.setField(objectUnderTest, "shipping", 0.0);
    final HashMap<Product, Integer> hashMap = new HashMap<Product, Integer>();
    Reflector.setField(objectUnderTest, "cartItems", hashMap);
    Reflector.setField(objectUnderTest, "taxRate", 0.0);
    Reflector.setField(objectUnderTest, "total", 0.0);
    objectUnderTest.setSubtotal(0.0);
    objectUnderTest.setTax(0.0);

    // Act
    final Product retval = objectUnderTest.checkInvalid();

    // Assert result
    Assert.assertNull(retval);
  }

  /*
   * Test generated by Diffblue Cover.
   * This test case covers:
   *  - conditional line 116 branch to line 116
   *  - conditional line 116 branch to line 116
   *  - conditional line 117 branch to line 117
   *  - conditional line 117 branch to line 120
   *  - conditional line 116 branch to line
   *  - conditional line 116 branch to line 121
   */

  @Test
  public void checkInvalidOutputNull2() throws InvocationTargetException {

    // Arrange
    final Cart objectUnderTest = new Cart();
    Reflector.setField(objectUnderTest, "shipping", 0.0);
    final HashMap<Product, Integer> hashMap = new HashMap<Product, Integer>();
    hashMap.put(null, 0);
    Reflector.setField(objectUnderTest, "cartItems", hashMap);
    Reflector.setField(objectUnderTest, "taxRate", 0.0);
    Reflector.setField(objectUnderTest, "total", 0.0);
    objectUnderTest.setSubtotal(0.0);
    objectUnderTest.setTax(0.0);

    // Act
    final Product retval = objectUnderTest.checkInvalid();

    // Assert result
    Assert.assertNull(retval);
  }

  /*
   * Test generated by Diffblue Cover.
   * This test case covers:
   *  - conditional line 116 branch to line 116
   *  - conditional line 116 branch to line 116
   *  - conditional line 117 branch to line 117
   *  - conditional line 117 branch to line 118
   *  - conditional line 118 branch to line 118
   */

  @Test
  public void checkInvalidOutputNull3() throws InvocationTargetException {

    // Arrange
    final Cart objectUnderTest = new Cart();
    Reflector.setField(objectUnderTest, "shipping", 0.0);
    final HashMap<Product, Integer> hashMap = new HashMap<Product, Integer>();
    hashMap.put(null, -2_147_483_648);
    Reflector.setField(objectUnderTest, "cartItems", hashMap);
    Reflector.setField(objectUnderTest, "taxRate", 0.0);
    Reflector.setField(objectUnderTest, "total", 0.0);
    objectUnderTest.setSubtotal(0.0);
    objectUnderTest.setTax(0.0);

    // Act
    final Product retval = objectUnderTest.checkInvalid();

    // Assert result
    Assert.assertNull(retval);
  }

  /*
   * Test generated by Diffblue Cover.
   * This test case covers:
   *  - conditional line 105 branch to line 106
   */

  @Test
  public void checkTaxInputNotNullPositiveOutputNegative() throws InvocationTargetException {

    // Arrange
    final Cart objectUnderTest = new Cart();
    Reflector.setField(objectUnderTest, "shipping", 0.0);
    Reflector.setField(objectUnderTest, "cartItems", null);
    Reflector.setField(objectUnderTest, "taxRate", -0x1.c000000000001p+52 /* -7.8813e+15 */);
    Reflector.setField(objectUnderTest, "total", 0.0);
    objectUnderTest.setSubtotal(0.0);
    objectUnderTest.setTax(-0x0.ffffffffffffep-1022 /* -2.22507e-308 */);
    final Product product = new Product();
    product.setDescription(null);
    product.setSize(null);
    final Category category = new Category();
    Reflector.setField(category, "products", null);
    category.setId(0);
    Reflector.setField(category, "name", "Small");
    product.setCategory(category);
    product.setPhoto(null);
    Reflector.setField(product, "name", null);
    final Collection collection = new Collection();
    product.setCollection(collection);
    product.setId(0);
    product.setSku(null);
    product.setPrice(0.0);
    final double productTotal = 0x0.0000000000001p-1022 /* 4.94066e-324 */;

    // Act
    final double retval = objectUnderTest.checkTax(product, productTotal);

    // Assert result
    Assert.assertEquals(-0x1.6p-1021 /* -6.11895e-308 */, retval, 0.0);
  }

  /*
   * Test generated by Diffblue Cover.
   * This test case covers:
   *  - conditional line 105 branch to line 105
   *  - conditional line 105 branch to line 106
   */

  @Test
  public void checkTaxInputNotNullZeroOutputZero() throws InvocationTargetException {

    // Arrange
    final Cart objectUnderTest = new Cart();
    Reflector.setField(objectUnderTest, "shipping", 0.0);
    Reflector.setField(objectUnderTest, "cartItems", null);
    Reflector.setField(objectUnderTest, "taxRate", 0x1p+124 /* 2.12676e+37 */);
    Reflector.setField(objectUnderTest, "total", 0.0);
    objectUnderTest.setSubtotal(0.0);
    objectUnderTest.setTax(-0.0);
    final Product product = new Product();
    product.setDescription(null);
    product.setSize("Child");
    final Category category = new Category();
    product.setCategory(category);
    product.setPhoto(null);
    Reflector.setField(product, "name", null);
    product.setCollection(null);
    product.setId(0);
    product.setSku(null);
    product.setPrice(0.0);
    final double productTotal = 0.0;

    // Act
    final double retval = objectUnderTest.checkTax(product, productTotal);

    // Assert result
    Assert.assertEquals(0.0, retval, 0.0);
  }

  /*
   * Test generated by Diffblue Cover.
   * This test case covers:
   *  - conditional line 105 branch to line 105
   *  - conditional line 105 branch to line 108
   */

  @Test
  public void checkTaxInputNotNullZeroOutputZero2() throws InvocationTargetException {

    // Arrange
    final Cart objectUnderTest = new Cart();
    Reflector.setField(objectUnderTest, "shipping", 0.0);
    Reflector.setField(objectUnderTest, "cartItems", null);
    Reflector.setField(objectUnderTest, "taxRate", 0x1p+124 /* 2.12676e+37 */);
    Reflector.setField(objectUnderTest, "total", 0.0);
    objectUnderTest.setSubtotal(0.0);
    objectUnderTest.setTax(-0.0);
    final Product product = new Product();
    product.setDescription(null);
    product.setSize("Child");
    final Category category = new Category();
    Reflector.setField(category, "products", null);
    category.setId(0);
    Reflector.setField(category, "name", "Apparel");
    product.setCategory(category);
    product.setPhoto(null);
    Reflector.setField(product, "name", null);
    product.setCollection(null);
    product.setId(0);
    product.setSku(null);
    product.setPrice(0.0);
    final double productTotal = 0.0;

    // Act
    final double retval = objectUnderTest.checkTax(product, productTotal);

    // Assert result
    Assert.assertEquals(-0.0, retval, 0.0);
  }

  /*
   * Test generated by Diffblue Cover.
   * This test case covers the entire method.
   */

  @Test
  public void constructorOutputVoid() {

    // Act, creating object to test constructor
    final Cart objectUnderTest = new Cart();

    // Method returns void, testing that no exception is thrown
  }

  /*
   * Test generated by Diffblue Cover.
   * This test case covers the entire method.
   */

  @Test
  public void getProductsOutputNull() throws InvocationTargetException {

    // Arrange
    final Cart objectUnderTest = new Cart();
    Reflector.setField(objectUnderTest, "shipping", 0.0);
    Reflector.setField(objectUnderTest, "cartItems", null);
    Reflector.setField(objectUnderTest, "taxRate", 0.0);
    Reflector.setField(objectUnderTest, "total", 0.0);
    objectUnderTest.setSubtotal(0.0);
    objectUnderTest.setTax(0.0);

    // Act
    final Map<Product, Integer> retval = objectUnderTest.getProducts();

    // Assert result
    Assert.assertNull(retval);
  }

  /*
   * Test generated by Diffblue Cover.
   * This test case covers the entire method.
   */

  @Test
  public void getShippingOutputZero() throws InvocationTargetException {

    // Arrange
    final Cart objectUnderTest = new Cart();
    Reflector.setField(objectUnderTest, "shipping", 0.0);
    Reflector.setField(objectUnderTest, "cartItems", null);
    Reflector.setField(objectUnderTest, "taxRate", 0.0);
    Reflector.setField(objectUnderTest, "total", 0.0);
    objectUnderTest.setSubtotal(0.0);
    objectUnderTest.setTax(0.0);

    // Act
    final double retval = objectUnderTest.getShipping();

    // Assert result
    Assert.assertEquals(0.0, retval, 0.0);
  }

  /*
   * Test generated by Diffblue Cover.
   * This test case covers the entire method.
   */

  @Test
  public void getSubtotalOutputZero() throws InvocationTargetException {

    // Arrange
    final Cart objectUnderTest = new Cart();
    Reflector.setField(objectUnderTest, "shipping", 0.0);
    Reflector.setField(objectUnderTest, "cartItems", null);
    Reflector.setField(objectUnderTest, "taxRate", 0.0);
    Reflector.setField(objectUnderTest, "total", 0.0);
    objectUnderTest.setSubtotal(0.0);
    objectUnderTest.setTax(0.0);

    // Act
    final double retval = objectUnderTest.getSubtotal();

    // Assert result
    Assert.assertEquals(0.0, retval, 0.0);
  }

  /*
   * Test generated by Diffblue Cover.
   * This test case covers the entire method.
   */

  @Test
  public void getTaxOutputZero() throws InvocationTargetException {

    // Arrange
    final Cart objectUnderTest = new Cart();
    Reflector.setField(objectUnderTest, "shipping", 0.0);
    Reflector.setField(objectUnderTest, "cartItems", null);
    Reflector.setField(objectUnderTest, "taxRate", 0.0);
    Reflector.setField(objectUnderTest, "total", 0.0);
    objectUnderTest.setSubtotal(0.0);
    objectUnderTest.setTax(0.0);

    // Act
    final double retval = objectUnderTest.getTax();

    // Assert result
    Assert.assertEquals(0.0, retval, 0.0);
  }

  /*
   * Test generated by Diffblue Cover.
   * This test case covers the entire method.
   */

  @Test
  public void getTotalOutputZero() throws InvocationTargetException {

    // Arrange
    final Cart objectUnderTest = new Cart();
    Reflector.setField(objectUnderTest, "shipping", 0.0);
    Reflector.setField(objectUnderTest, "cartItems", null);
    Reflector.setField(objectUnderTest, "taxRate", 0.0);
    Reflector.setField(objectUnderTest, "total", 0x1.fffffffffffffp+61 /* 4.61169e+18 */);
    objectUnderTest.setSubtotal(-0x1.fffffffffffffp+61 /* -4.61169e+18 */);
    objectUnderTest.setTax(0.0);

    // Act
    final double retval = objectUnderTest.getTotal();

    // Assert result
    Assert.assertEquals(0.0, retval, 0.0);
  }

  /*
   * Test generated by Diffblue Cover.
   * This test case covers the entire method.
   */

  @Test
  public void setSubtotalInputZeroOutputVoid() throws InvocationTargetException {

    // Arrange
    final Cart objectUnderTest = new Cart();
    Reflector.setField(objectUnderTest, "shipping", 0.0);
    Reflector.setField(objectUnderTest, "cartItems", null);
    Reflector.setField(objectUnderTest, "taxRate", 0.0);
    Reflector.setField(objectUnderTest, "total", 0.0);
    objectUnderTest.setSubtotal(0.0);
    objectUnderTest.setTax(0.0);
    final double subtotal = 0.0;

    // Act
    objectUnderTest.setSubtotal(subtotal);

    // Method returns void, testing that no exception is thrown
  }

  /*
   * Test generated by Diffblue Cover.
   * This test case covers the entire method.
   */

  @Test
  public void setTaxInputZeroOutputVoid() throws InvocationTargetException {

    // Arrange
    final Cart objectUnderTest = new Cart();
    Reflector.setField(objectUnderTest, "shipping", 0.0);
    Reflector.setField(objectUnderTest, "cartItems", null);
    Reflector.setField(objectUnderTest, "taxRate", 0.0);
    Reflector.setField(objectUnderTest, "total", 0.0);
    objectUnderTest.setSubtotal(0.0);
    objectUnderTest.setTax(0.0);
    final double tax = 0.0;

    // Act
    objectUnderTest.setTax(tax);

    // Method returns void, testing that no exception is thrown
  }

  /*
   * Test generated by Diffblue Cover.
   * This test case covers the entire method.
   */

  @Test
  public void setTotalInputZeroZeroOutputVoid() throws InvocationTargetException {

    // Arrange
    final Cart objectUnderTest = new Cart();
    Reflector.setField(objectUnderTest, "shipping", 0.0);
    Reflector.setField(objectUnderTest, "cartItems", null);
    Reflector.setField(objectUnderTest, "taxRate", 0.0);
    Reflector.setField(objectUnderTest, "total", 0.0);
    objectUnderTest.setSubtotal(0.0);
    objectUnderTest.setTax(0.0);
    final double tax = 0.0;
    final double shipping = 0.0;

    // Act
    objectUnderTest.setTotal(tax, shipping);

    // Method returns void, testing that no exception is thrown
  }

  /*
   * Test generated by Diffblue Cover.
   * This test case covers:
   *  - conditional line 82 branch to line 82
   *  - conditional line 82 branch to line 83
   *  - conditional line 83 branch to line 83
   *  - conditional line 90 branch to line 93
   *  - conditional line 93 branch to line 93
   */

  @Test
  public void updateProductQuantityInputNotNullPositiveNotNullOutputVoid()
      throws InvocationTargetException {

    // Arrange
    final Cart objectUnderTest = new Cart();
    Reflector.setField(objectUnderTest, "shipping", 0.0);
    final HashMap<Product, Integer> hashMap = new HashMap<Product, Integer>();
    final Product product1 = new Product();
    product1.setDescription(null);
    product1.setSize("Child###########################");
    final Category category = new Category();
    product1.setCategory(category);
    product1.setPhoto(null);
    Reflector.setField(product1, "name", null);
    final Collection collection = new Collection();
    collection.setId(33_431_762);
    product1.setCollection(collection);
    product1.setId(0);
    product1.setSku(null);
    product1.setPrice(-0x0.606f97d4p-1022 /* -8.38191e-309 */);
    hashMap.put(product1, 1_878_520_859);
    Reflector.setField(objectUnderTest, "cartItems", hashMap);
    Reflector.setField(objectUnderTest, "taxRate", -0x1.9274b0e3ac8b2p-575 /* -1.27125e-173 */);
    Reflector.setField(objectUnderTest, "total", 0.0);
    objectUnderTest.setSubtotal(0x1.f154015p-481 /* 3.11154e-145 */);
    objectUnderTest.setTax(504.0);
    final Product product = new Product();
    product.setDescription(null);
    product.setSize(null);
    final Category category1 = new Category();
    product.setCategory(category1);
    product.setPhoto(null);
    Reflector.setField(product, "name", null);
    final Collection collection1 = new Collection();
    collection1.setId(33_431_762);
    product.setCollection(collection1);
    product.setId(0);
    product.setSku(null);
    product.setPrice(-0x0.606f97d4p-1022 /* -8.38191e-309 */);
    final int newQty = 1;
    final String size = "Child###########################";

    // Act
    objectUnderTest.updateProductQuantity(product, newQty, size);

    // Method returns void, testing that no exception is thrown
  }

  /*
   * Test generated by Diffblue Cover.
   * This test case covers:
   *  - conditional line 82 branch to line 82
   *  - conditional line 82 branch to line 97
   */

  @Test
  public void updateProductQuantityInputNotNullZeroNotNullOutputVoid()
      throws InvocationTargetException {

    // Arrange
    final Cart objectUnderTest = new Cart();
    Reflector.setField(objectUnderTest, "shipping", -0x1.46120008p-992 /* -3.0431e-299 */);
    final HashMap<Product, Integer> hashMap = new HashMap<Product, Integer>();
    Reflector.setField(objectUnderTest, "cartItems", hashMap);
    Reflector.setField(objectUnderTest, "taxRate", -0x0.3fff0004p-1022 /* -5.56235e-309 */);
    Reflector.setField(objectUnderTest, "total", 0.0);
    objectUnderTest.setSubtotal(0x1p-767 /* 1.28823e-231 */);
    objectUnderTest.setTax(0x0.46120008p-1022 /* 6.0903e-309 */);
    final Product product = new Product();
    product.setDescription(null);
    product.setSize(null);
    final Category category = new Category();
    Reflector.setField(category, "products", null);
    category.setId(0);
    Reflector.setField(category, "name", "Medium");
    product.setCategory(category);
    product.setPhoto(null);
    Reflector.setField(product, "name", null);
    product.setCollection(null);
    product.setId(0);
    product.setSku(null);
    product.setPrice(0x1p-1021 /* 4.45015e-308 */);
    final int newQty = 0;
    final String size = "Large";

    // Act
    objectUnderTest.updateProductQuantity(product, newQty, size);

    // Method returns void, testing that no exception is thrown
  }

  /*
   * Test generated by Diffblue Cover.
   * This test case covers:
   *  - conditional line 82 branch to line 82
   *  - conditional line 82 branch to line 83
   *  - conditional line 83 branch to line 83
   *  - conditional line 90 branch to line 91
   *  - conditional line 91 branch to line 91
   */

  @Test
  public void updateProductQuantityInputNotNullZeroNotNullOutputVoid2()
      throws InvocationTargetException {

    // Arrange
    final Cart objectUnderTest = new Cart();
    Reflector.setField(objectUnderTest, "shipping", 0.0);
    final HashMap<Product, Integer> hashMap = new HashMap<Product, Integer>();
    final Product product1 = new Product();
    product1.setDescription(null);
    product1.setSize("Child\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'");
    final Category category = new Category();
    product1.setCategory(category);
    product1.setPhoto(null);
    Reflector.setField(product1, "name", null);
    final Collection collection = new Collection();
    collection.setId(33_431_762);
    product1.setCollection(collection);
    product1.setId(0);
    product1.setSku(null);
    product1.setPrice(-0x0.606f97d4p-1022 /* -8.38191e-309 */);
    hashMap.put(product1, 1_878_520_858);
    Reflector.setField(objectUnderTest, "cartItems", hashMap);
    Reflector.setField(objectUnderTest, "taxRate", -0x1.9274b0e3ac8b2p-575 /* -1.27125e-173 */);
    Reflector.setField(objectUnderTest, "total", 0.0);
    objectUnderTest.setSubtotal(0x1.f154015p-481 /* 3.11154e-145 */);
    objectUnderTest.setTax(504.0);
    final Product product = new Product();
    product.setDescription(null);
    product.setSize(null);
    final Category category1 = new Category();
    product.setCategory(category1);
    product.setPhoto(null);
    Reflector.setField(product, "name", null);
    final Collection collection1 = new Collection();
    collection1.setId(33_431_762);
    product.setCollection(collection1);
    product.setId(0);
    product.setSku(null);
    product.setPrice(-0x0.606f97d4p-1022 /* -8.38191e-309 */);
    final int newQty = 0;
    final String size = "Child\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'";

    // Act
    objectUnderTest.updateProductQuantity(product, newQty, size);

    // Method returns void, testing that no exception is thrown
  }
}
