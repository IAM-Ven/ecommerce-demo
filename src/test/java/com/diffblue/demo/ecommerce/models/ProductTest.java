package com.diffblue.demo.ecommerce.models;

import com.diffblue.deeptestutils.Reflector;
import com.diffblue.demo.ecommerce.models.Category;
import com.diffblue.demo.ecommerce.models.Collection;
import com.diffblue.demo.ecommerce.models.Product;
import org.junit.Assert;
import org.junit.Rule;
import org.junit.Test;
import org.junit.rules.ExpectedException;
import org.junit.rules.Timeout;

import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;

public class ProductTest {

  @Rule public ExpectedException thrown = ExpectedException.none();
  @Rule public Timeout globalTimeout = new Timeout(10000);

  /* testedClasses: Product */
  /*
   * Test generated by Diffblue Cover.
   * This test case covers the entire method.
   */

  @Test
  public void constructorOutputVoid() {

    // Act, creating object to test constructor
    final Product objectUnderTest = new Product();

    // Method returns void, testing that no exception is thrown
  }

  /*
   * Test generated by Diffblue Cover.
   * This test case covers:
   *  - conditional line 184 branch to line 187
   *  - conditional line 187 branch to line 187
   *  - conditional line 188 branch to line 188
   */

  @Test
  public void equalsInputNotNullOutputFalse() throws InvocationTargetException {

    // Arrange
    final Product objectUnderTest = new Product();
    objectUnderTest.setDescription(null);
    objectUnderTest.setSize("Small");
    objectUnderTest.setCategory(null);
    objectUnderTest.setPhoto(null);
    Reflector.setField(objectUnderTest, "name", null);
    objectUnderTest.setCollection(null);
    objectUnderTest.setId(1);
    objectUnderTest.setSku(null);
    objectUnderTest.setPrice(0x0.0000000000001p-1022 /* 4.94066e-324 */);
    final Product obj = new Product();
    obj.setPrice(0x0.0000000000001p-1022 /* 4.94066e-324 */);

    // Act
    final boolean retval = objectUnderTest.equals(obj);

    // Assert result
    Assert.assertEquals(false, retval);
  }

  /*
   * Test generated by Diffblue Cover.
   * This test case covers:
   *  - conditional line 184 branch to line 187
   *  - conditional line 187 branch to line 187
   *  - conditional line 188 branch to line 188
   */

  @Test
  public void equalsInputNotNullOutputFalse2() throws InvocationTargetException {

    // Arrange
    final Product objectUnderTest = new Product();
    objectUnderTest.setDescription(null);
    objectUnderTest.setSize("Small");
    objectUnderTest.setCategory(null);
    objectUnderTest.setPhoto(null);
    Reflector.setField(objectUnderTest, "name", null);
    objectUnderTest.setCollection(null);
    objectUnderTest.setId(0);
    objectUnderTest.setSku(null);
    objectUnderTest.setPrice(0x0.0000000000001p-1022 /* 4.94066e-324 */);
    final Product obj = new Product();
    obj.setDescription(null);
    obj.setSize(null);
    obj.setCategory(null);
    obj.setPhoto(null);
    Reflector.setField(obj, "name", "Medium");
    obj.setCollection(null);
    obj.setId(0);
    obj.setSku(null);
    obj.setPrice(0x0.0000000000001p-1022 /* 4.94066e-324 */);

    // Act
    final boolean retval = objectUnderTest.equals(obj);

    // Assert result
    Assert.assertEquals(false, retval);
  }

  /*
   * Test generated by Diffblue Cover.
   * This test case covers:
   *  - conditional line 184 branch to line 187
   *  - conditional line 187 branch to line 187
   *  - conditional line 188 branch to line 188
   *  - conditional line 188 branch to line 190
   */

  @Test
  public void equalsInputNotNullOutputFalse3() throws InvocationTargetException {

    // Arrange
    final Product objectUnderTest = new Product();
    objectUnderTest.setDescription(null);
    objectUnderTest.setSize("Small");
    objectUnderTest.setCategory(null);
    objectUnderTest.setPhoto(null);
    Reflector.setField(objectUnderTest, "name", null);
    objectUnderTest.setCollection(null);
    objectUnderTest.setId(0);
    objectUnderTest.setSku(null);
    objectUnderTest.setPrice(0x0.0000000000001p-1022 /* 4.94066e-324 */);
    final Product obj = new Product();
    obj.setPrice(0x0.0000000000001p-1022 /* 4.94066e-324 */);

    // Act
    final boolean retval = objectUnderTest.equals(obj);

    // Assert result
    Assert.assertEquals(false, retval);
  }

  /*
   * Test generated by Diffblue Cover.
   * This test case covers:
   *  - conditional line 184 branch to line 187
   *  - conditional line 187 branch to line 187
   *  - conditional line 188 branch to line 188
   *  - conditional line 188 branch to line 189
   *  - conditional line 189 branch to line 190
   */

  @Test
  public void equalsInputNotNullOutputFalse4() throws InvocationTargetException {

    // Arrange
    final Product objectUnderTest = new Product();
    objectUnderTest.setDescription(null);
    objectUnderTest.setSize("Large");
    objectUnderTest.setCategory(null);
    objectUnderTest.setPhoto(null);
    Reflector.setField(objectUnderTest, "name", null);
    final Collection collection = new Collection();
    collection.setId(1);
    objectUnderTest.setCollection(collection);
    objectUnderTest.setId(0);
    objectUnderTest.setSku(null);
    objectUnderTest.setPrice(0x0.0000000000001p-1022 /* 4.94066e-324 */);
    final Product obj = new Product();
    obj.setDescription(null);
    obj.setSize("Large");
    obj.setCategory(null);
    obj.setPhoto(null);
    Reflector.setField(obj, "name", null);
    final Collection collection1 = new Collection();
    obj.setCollection(collection1);
    obj.setId(0);
    obj.setSku(null);
    obj.setPrice(0x0.0000000000001p-1022 /* 4.94066e-324 */);

    // Act
    final boolean retval = objectUnderTest.equals(obj);

    // Assert result
    Assert.assertEquals(false, retval);
  }

  /*
   * Test generated by Diffblue Cover.
   * This test case covers:
   *  - conditional line 184 branch to line 187
   *  - conditional line 187 branch to line 187
   *  - conditional line 188 branch to line 188
   *  - conditional line 188 branch to line 189
   *  - conditional line 189 branch to line 190
   *  - conditional line 190 branch to line 190
   */

  @Test
  public void equalsInputNotNullOutputFalse5() throws InvocationTargetException {

    // Arrange
    final Product objectUnderTest = new Product();
    objectUnderTest.setDescription(null);
    objectUnderTest.setSize("Large");
    final Category category = new Category();
    objectUnderTest.setCategory(category);
    objectUnderTest.setPhoto(null);
    Reflector.setField(objectUnderTest, "name", null);
    final Collection collection = new Collection();
    objectUnderTest.setCollection(collection);
    objectUnderTest.setId(0);
    objectUnderTest.setSku(null);
    objectUnderTest.setPrice(0x0.0000000000001p-1022 /* 4.94066e-324 */);
    final Product obj = new Product();
    obj.setDescription(null);
    obj.setSize("Large");
    final Category category1 = new Category();
    category1.setId(1);
    obj.setCategory(category1);
    obj.setPhoto(null);
    Reflector.setField(obj, "name", null);
    final Collection collection1 = new Collection();
    obj.setCollection(collection1);
    obj.setId(0);
    obj.setSku(null);
    obj.setPrice(0x0.0000000000001p-1022 /* 4.94066e-324 */);

    // Act
    final boolean retval = objectUnderTest.equals(obj);

    // Assert result
    Assert.assertEquals(false, retval);
  }

  /*
   * Test generated by Diffblue Cover.
   * This test case covers:
   *  - conditional line 184 branch to line 187
   *  - conditional line 187 branch to line 187
   *  - conditional line 188 branch to line 188
   *  - conditional line 188 branch to line 189
   *  - conditional line 189 branch to line 190
   *  - conditional line 190 branch to line 190
   *  - conditional line 190 branch to line 188
   */

  @Test
  public void equalsInputNotNullOutputFalse6() throws InvocationTargetException {

    // Arrange
    final Product objectUnderTest = new Product();
    objectUnderTest.setDescription(null);
    objectUnderTest.setSize("Large");
    final Category category = new Category();
    category.setId(1);
    objectUnderTest.setCategory(category);
    objectUnderTest.setPhoto(null);
    Reflector.setField(objectUnderTest, "name", null);
    final Collection collection = new Collection();
    objectUnderTest.setCollection(collection);
    objectUnderTest.setId(0);
    objectUnderTest.setSku(null);
    objectUnderTest.setPrice(0x0.0000000000001p-1022 /* 4.94066e-324 */);
    final Product obj = new Product();
    obj.setDescription("Medium");
    obj.setSize("Large");
    final Category category1 = new Category();
    category1.setId(1);
    obj.setCategory(category1);
    obj.setPhoto(null);
    Reflector.setField(obj, "name", null);
    final Collection collection1 = new Collection();
    obj.setCollection(collection1);
    obj.setId(0);
    obj.setSku(null);
    obj.setPrice(0x0.0000000000001p-1022 /* 4.94066e-324 */);

    // Act
    final boolean retval = objectUnderTest.equals(obj);

    // Assert result
    Assert.assertEquals(false, retval);
  }

  /*
   * Test generated by Diffblue Cover.
   * This test case covers:
   *  - conditional line 184 branch to line 187
   *  - conditional line 187 branch to line 187
   *  - conditional line 188 branch to line 188
   *  - conditional line 188 branch to line 189
   *  - conditional line 189 branch to line 190
   *  - conditional line 190 branch to line 190
   */

  @Test
  public void equalsInputNotNullOutputTrue() throws InvocationTargetException {

    // Arrange
    final Product objectUnderTest = new Product();
    objectUnderTest.setDescription(null);
    objectUnderTest.setSize("Large");
    final Category category = new Category();
    category.setId(1);
    objectUnderTest.setCategory(category);
    objectUnderTest.setPhoto(null);
    Reflector.setField(objectUnderTest, "name", null);
    final Collection collection = new Collection();
    objectUnderTest.setCollection(collection);
    objectUnderTest.setId(0);
    objectUnderTest.setSku(null);
    objectUnderTest.setPrice(0x0.0000000000001p-1022 /* 4.94066e-324 */);
    final Product obj = new Product();
    obj.setDescription(null);
    obj.setSize("Large");
    final Category category1 = new Category();
    category1.setId(1);
    obj.setCategory(category1);
    obj.setPhoto(null);
    Reflector.setField(obj, "name", null);
    final Collection collection1 = new Collection();
    obj.setCollection(collection1);
    obj.setId(0);
    obj.setSku(null);
    obj.setPrice(0x0.0000000000001p-1022 /* 4.94066e-324 */);

    // Act
    final boolean retval = objectUnderTest.equals(obj);

    // Assert result
    Assert.assertEquals(true, retval);
  }

  /*
   * Test generated by Diffblue Cover.
   * This test case covers:
   *  - conditional line 184 branch to line 185
   */

  @Test
  public void equalsInputNullOutputFalse() throws InvocationTargetException {

    // Arrange
    final Product objectUnderTest = new Product();
    objectUnderTest.setDescription(null);
    objectUnderTest.setSize(null);
    objectUnderTest.setCategory(null);
    objectUnderTest.setPhoto(null);
    Reflector.setField(objectUnderTest, "name", null);
    objectUnderTest.setCollection(null);
    objectUnderTest.setId(0);
    objectUnderTest.setSku("");
    objectUnderTest.setPrice(0x1.fffffffffffffp+512 /* 2.68156e+154 */);
    final Object obj = null;

    // Act
    final boolean retval = objectUnderTest.equals(obj);

    // Assert result
    Assert.assertEquals(false, retval);
  }

  /*
   * Test generated by Diffblue Cover.
   * This test case covers the entire method.
   */

  @Test
  public void getCategoryOutputNull() {

    // Arrange
    final Product objectUnderTest = new Product();

    // Act
    final Category retval = objectUnderTest.getCategory();

    // Assert result
    Assert.assertNull(retval);
  }

  /*
   * Test generated by Diffblue Cover.
   * This test case covers the entire method.
   */

  @Test
  public void getCollectionOutputNull() {

    // Arrange
    final Product objectUnderTest = new Product();

    // Act
    final Collection retval = objectUnderTest.getCollection();

    // Assert result
    Assert.assertNull(retval);
  }

  /*
   * Test generated by Diffblue Cover.
   * This test case covers the entire method.
   */

  @Test
  public void getDescriptionOutputNull() {

    // Arrange
    final Product objectUnderTest = new Product();

    // Act
    final String retval = objectUnderTest.getDescription();

    // Assert result
    Assert.assertNull(retval);
  }

  /*
   * Test generated by Diffblue Cover.
   * This test case covers the entire method.
   */

  @Test
  public void getIdOutputZero() {

    // Arrange
    final Product objectUnderTest = new Product();

    // Act
    final int retval = objectUnderTest.getId();

    // Assert result
    Assert.assertEquals(0, retval);
  }

  /*
   * Test generated by Diffblue Cover.
   * This test case covers the entire method.
   */

  @Test
  public void getNameOutputNull() {

    // Arrange
    final Product objectUnderTest = new Product();

    // Act
    final String retval = objectUnderTest.getName();

    // Assert result
    Assert.assertNull(retval);
  }

  /*
   * Test generated by Diffblue Cover.
   * This test case covers the entire method.
   */

  @Test
  public void getPhotoOutputNull() {

    // Arrange
    final Product objectUnderTest = new Product();

    // Act
    final String retval = objectUnderTest.getPhoto();

    // Assert result
    Assert.assertNull(retval);
  }

  /*
   * Test generated by Diffblue Cover.
   * This test case covers the entire method.
   */

  @Test
  public void getPriceOutputZero() {

    // Arrange
    final Product objectUnderTest = new Product();

    // Act
    final double retval = objectUnderTest.getPrice();

    // Assert result
    Assert.assertEquals(0.0, retval, 0.0);
  }

  /*
   * Test generated by Diffblue Cover.
   * This test case covers the entire method.
   */

  @Test
  public void getSizeOutputNull() {

    // Arrange
    final Product objectUnderTest = new Product();

    // Act
    final String retval = objectUnderTest.getSize();

    // Assert result
    Assert.assertNull(retval);
  }

  /*
   * Test generated by Diffblue Cover.
   * This test case covers the entire method.
   */

  @Test
  public void getSkuOutputNull() {

    // Arrange
    final Product objectUnderTest = new Product();

    // Act
    final String retval = objectUnderTest.getSku();

    // Assert result
    Assert.assertNull(retval);
  }

  /*
   * Test generated by Diffblue Cover.
   * This test case covers the entire method.
   */

  @Test
  public void hashCodeOutputZero() {

    // Arrange
    final Product objectUnderTest = new Product();

    // Act
    final int retval = objectUnderTest.hashCode();

    // Assert result
    Assert.assertEquals(0, retval);
  }

  /*
   * Test generated by Diffblue Cover.
   * This test case covers the entire method.
   */

  @Test
  public void setCategoryInputNotNullOutputVoid() {

    // Arrange
    final Product objectUnderTest = new Product();
    final Category category = new Category();

    // Act
    objectUnderTest.setCategory(category);

    // Method returns void, testing that no exception is thrown
  }

  /*
   * Test generated by Diffblue Cover.
   * This test case covers the entire method.
   */

  @Test
  public void setCollectionInputNotNullOutputVoid() {

    // Arrange
    final Product objectUnderTest = new Product();
    final Collection collection = new Collection();

    // Act
    objectUnderTest.setCollection(collection);

    // Method returns void, testing that no exception is thrown
  }

  /*
   * Test generated by Diffblue Cover.
   * This test case covers the entire method.
   */

  @Test
  public void setDescriptionInputNotNullOutputVoid() {

    // Arrange
    final Product objectUnderTest = new Product();
    final String description = "Large";

    // Act
    objectUnderTest.setDescription(description);

    // Method returns void, testing that no exception is thrown
  }

  /*
   * Test generated by Diffblue Cover.
   * This test case covers the entire method.
   */

  @Test
  public void setIdInputZeroOutputVoid() {

    // Arrange
    final Product objectUnderTest = new Product();
    final int newId = 0;

    // Act
    objectUnderTest.setId(newId);

    // Method returns void, testing that no exception is thrown
  }

  /*
   * Test generated by Diffblue Cover.
   * This test case covers:
   *  - conditional line 76 branch to line 77
   */

  @Test
  public void setNameInputNotNullOutputVoid() {

    // Arrange
    final Product objectUnderTest = new Product();
    final String newName = "Medium";

    // Act
    objectUnderTest.setName(newName);

    // Method returns void, testing that no exception is thrown
  }

  /*
   * Test generated by Diffblue Cover.
   * This test case covers:
   *  - conditional line 76 branch to line 79
   */

  @Test
  public void setNameInputNotNullOutputVoid2() throws InvocationTargetException {

    // Arrange
    final Product objectUnderTest = new Product();
    objectUnderTest.setDescription("");
    objectUnderTest.setSize(null);
    objectUnderTest.setCategory(null);
    objectUnderTest.setPhoto(null);
    Reflector.setField(objectUnderTest, "name", null);
    objectUnderTest.setCollection(null);
    objectUnderTest.setId(0);
    objectUnderTest.setSku(null);
    objectUnderTest.setPrice(0.0);
    final String newName = "";

    // Act
    objectUnderTest.setName(newName);

    // Method returns void, testing that no exception is thrown
  }

  /*
   * Test generated by Diffblue Cover.
   * This test case covers the entire method.
   */

  @Test
  public void setPhotoInputNotNullOutputVoid() {

    // Arrange
    final Product objectUnderTest = new Product();
    final String photo = "Large";

    // Act
    objectUnderTest.setPhoto(photo);

    // Method returns void, testing that no exception is thrown
  }

  /*
   * Test generated by Diffblue Cover.
   * This test case covers the entire method.
   */

  @Test
  public void setPriceInputZeroOutputVoid() {

    // Arrange
    final Product objectUnderTest = new Product();
    final double price = 0.0;

    // Act
    objectUnderTest.setPrice(price);

    // Method returns void, testing that no exception is thrown
  }

  /*
   * Test generated by Diffblue Cover.
   * This test case covers the entire method.
   */

  @Test
  public void setSizeInputNotNullOutputVoid() {

    // Arrange
    final Product objectUnderTest = new Product();
    final String size = "Large";

    // Act
    objectUnderTest.setSize(size);

    // Method returns void, testing that no exception is thrown
  }

  /*
   * Test generated by Diffblue Cover.
   * This test case covers the entire method.
   */

  @Test
  public void setSkuInputNotNullOutputVoid() {

    // Arrange
    final Product objectUnderTest = new Product();
    final String sku = "Large";

    // Act
    objectUnderTest.setSku(sku);

    // Method returns void, testing that no exception is thrown
  }
}
