package com.diffblue.demo.ecommerce;

import static org.mockito.AdditionalMatchers.or;
import static org.mockito.Matchers.isA;
import static org.mockito.Matchers.isNull;
import static org.powermock.api.mockito.PowerMockito.mockStatic;

import com.diffblue.deeptestutils.Reflector;
import com.diffblue.deeptestutils.mock.DTUMemberMatcher;
import com.diffblue.demo.ecommerce.Application;
import org.junit.Rule;
import org.junit.Test;
import org.junit.rules.ExpectedException;
import org.junit.rules.Timeout;
import org.junit.runner.RunWith;
import org.powermock.api.mockito.PowerMockito;
import org.powermock.core.classloader.annotations.PrepareForTest;
import org.powermock.modules.junit4.PowerMockRunner;
import org.springframework.boot.SpringApplication;
import org.springframework.context.ConfigurableApplicationContext;

import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;

@org.junit.runner.RunWith(org.powermock.modules.junit4.PowerMockRunner.class)
public class ApplicationTest {

  @Rule public ExpectedException thrown = ExpectedException.none();
  @Rule public Timeout globalTimeout = new Timeout(10000);

  /* testedClasses: Application */
  /*
   * Test generated by Diffblue Cover.
   * This test case covers the entire method.
   */

  @Test
  public void constructorOutputVoid() {

    // Act, creating object to test constructor
    final Application objectUnderTest = new Application();

    // Method returns void, testing that no exception is thrown
  }

  /*
   * Test generated by Diffblue Cover.
   * This test case covers the entire method.
   */
  @PrepareForTest({SpringApplication.class})
  @Test
  public void mainInput0OutputVoid() throws Exception, InvocationTargetException {

    // Setup mocks
    PowerMockito.mockStatic(SpringApplication.class);

    // Arrange
    final String[] args = {};
    final ConfigurableApplicationContext configurableApplicationContext =
        (ConfigurableApplicationContext)Reflector.getInstance(
            "org.springframework.context.ConfigurableApplicationContext");
    final Method runMethod = DTUMemberMatcher.method(SpringApplication.class, "run", Object.class,
                                                     java.lang.String[].class);
    PowerMockito.doReturn(configurableApplicationContext)
        .when(SpringApplication.class, runMethod)
        .withArguments(
            or(isA(Object.class), isNull(Object.class)),
            new Object[] {or(isA(java.lang.String[].class), isNull(java.lang.String[].class))});

    // Act
    Application.main(args);

    // Method returns void, testing that no exception is thrown
  }

  /*
   * Test generated by Diffblue Cover.
   * This test case covers the entire method.
   */

  @Test
  public void staticInitOutputVoid() throws InvocationTargetException {

    // Act, using constructor to test static initializer
    Object constructed = Reflector.getInstance("com.diffblue.demo.ecommerce.Application");

    // Method returns void, testing that no exception is thrown
  }
}
