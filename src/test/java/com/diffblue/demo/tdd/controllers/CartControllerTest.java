package com.diffblue.demo.tdd.controllers;

import org.junit.Assert;
import org.junit.rules.ExpectedException;
import org.junit.Test;

import java.lang.reflect.Array;
import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;

import com.diffblue.deeptestutils.CompareWithFieldList;
import com.diffblue.deeptestutils.Reflector;

public class CartControllerTest {

  @org.junit.Rule
  public ExpectedException thrown = ExpectedException.none();

  /* testedClasses: CartController */


  /*
   * Test generated by Diffblue Deeptest.
   * This test case covers:
   * conditional line 24 branch to line 24
   * conditional line 25 branch to line 25
   */

  @org.junit.Test
  public void com_diffblue_demo_tdd_controllers_CartController__init__000_b2d5d94c9189c8() throws Throwable {

    com.diffblue.demo.tdd.controllers.CartController instance;
    {
      /* Arrange */
      com.diffblue.demo.tdd.repositories.ProductRepository productRepo = null;

      /* Act */
      /* Creating object to test constructor */
      instance = new com.diffblue.demo.tdd.controllers.CartController(productRepo);

      /* Method return type is void, or not expected to return */
    }
  }

  /*
   * Test generated by Diffblue Deeptest.
   * This test case covers the entire function.
   */

  @org.junit.Test
  public void com_diffblue_demo_tdd_controllers_CartController_addCartItem_000_a2d4e615a00da5d() throws Throwable {

    String retval;
    {
      /* Arrange */
      com.diffblue.demo.tdd.controllers.CartController param_1 = (com.diffblue.demo.tdd.controllers.CartController) Reflector.getInstance("com.diffblue.demo.tdd.controllers.CartController");
      Reflector.setField(param_1, "productRepo", null);
      javax.servlet.http.HttpServletRequest request = null;
      javax.servlet.http.HttpSession session = null;

      /* Act */
      retval = param_1.addCartItem(request, session);
    }
    {
      /* Assert result */
      Assert.assertNotNull(retval);
      Assert.assertEquals("redirect:/cart", retval);
    }
  }

  /*
   * Test generated by Diffblue Deeptest.
   * This test case covers the entire function.
   */

  @org.junit.Test
  public void com_diffblue_demo_tdd_controllers_CartController_addProductToCart_000_e13c6234c2bc7f1b() throws Throwable {

    java.util.HashMap<Integer, Integer> retval;
    {
      /* Arrange */
      com.diffblue.demo.tdd.controllers.CartController param_2 = (com.diffblue.demo.tdd.controllers.CartController) Reflector.getInstance("com.diffblue.demo.tdd.controllers.CartController");
      com.diffblue.demo.tdd.repositories.ProductRepository productRepository = (com.diffblue.demo.tdd.repositories.ProductRepository) Reflector.getInstance("com.diffblue.demo.tdd.repositories.ProductRepository");
      Reflector.setField(param_2, "productRepo", productRepository);
      String productParam = null;
      java.util.HashMap<Integer, Integer> cartItems = null;

      /* Act */
      thrown.expect(IllegalArgumentException.class);
      retval = param_2.addProductToCart(productParam, cartItems);
    }
  }

  /*
   * Test generated by Diffblue Deeptest.
   * This test case covers:
   * conditional line 36 branch to line 36
   * conditional line 36 branch to line 41
   */
  @org.junit.Test
  public void com_diffblue_demo_tdd_controllers_CartController_addProductToCart_000_289f4df8a9fea2b8() throws Throwable {
    java.util.HashMap<Integer, Integer> retval;
    {
      /* Arrange */
      com.diffblue.demo.tdd.controllers.CartController param_4 = (com.diffblue.demo.tdd.controllers.CartController) Reflector.getInstance("com.diffblue.demo.tdd.controllers.CartController");
      Reflector.setField(param_4, "productRepo", null);
      String productParam = "";
      java.util.HashMap<Integer, Integer> cartItems = new java.util.HashMap<Integer, Integer>();
      /* Act */
      retval = param_4.addProductToCart(productParam, cartItems);
    }
    {
      /* Assert result */
      Assert.assertNotNull(retval);
      java.util.HashMap<Integer, Integer> hashMap = new java.util.HashMap<Integer, Integer>();
      Assert.assertEquals(hashMap, retval);
    }
  }
}
